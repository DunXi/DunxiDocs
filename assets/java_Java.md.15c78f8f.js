import{_ as o,c as r,b as s,d as n,e as l,w as p,a as e,r as t,o as c}from"./app.450482b3.js";const I=JSON.parse('{"title":"Windows操作系统","description":"","frontmatter":{},"headers":[{"level":3,"title":"打开控制台的几种方式：","slug":"打开控制台的几种方式","link":"#打开控制台的几种方式","children":[]},{"level":2,"title":"JVM、JRE、JDK","slug":"jvm、jre、jdk","link":"#jvm、jre、jdk","children":[]},{"level":2,"title":"注释：","slug":"注释","link":"#注释","children":[{"level":3,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[]}]},{"level":2,"title":"变量","slug":"变量","link":"#变量","children":[{"level":3,"title":"数据类型转换","slug":"数据类型转换","link":"#数据类型转换","children":[]},{"level":3,"title":"Scanner-键盘录入数据","slug":"scanner-键盘录入数据","link":"#scanner-键盘录入数据","children":[]},{"level":3,"title":"逻辑运算符","slug":"逻辑运算符","link":"#逻辑运算符","children":[]},{"level":3,"title":"流程控制语句-if","slug":"流程控制语句-if","link":"#流程控制语句-if","children":[]},{"level":3,"title":"流程控制语句-switch","slug":"流程控制语句-switch","link":"#流程控制语句-switch","children":[]}]},{"level":2,"title":"循环语句","slug":"循环语句","link":"#循环语句","children":[{"level":3,"title":"for循环","slug":"for循环","link":"#for循环","children":[]},{"level":3,"title":"while循环","slug":"while循环","link":"#while循环","children":[]},{"level":3,"title":"do...while循环","slug":"do-while循环","link":"#do-while循环","children":[]}]},{"level":2,"title":"循环总结","slug":"循环总结","link":"#循环总结","children":[]},{"level":2,"title":"循环控制语句","slug":"循环控制语句","link":"#循环控制语句","children":[{"level":3,"title":"break","slug":"break","link":"#break","children":[]},{"level":3,"title":"continue","slug":"continue","link":"#continue","children":[]}]},{"level":2,"title":"Random-生成随机数","slug":"random-生成随机数","link":"#random-生成随机数","children":[{"level":3,"title":"使用步骤","slug":"使用步骤-1","link":"#使用步骤-1","children":[]}]},{"level":2,"title":"数组","slug":"数组","link":"#数组","children":[{"level":3,"title":"数组的特点","slug":"数组的特点","link":"#数组的特点","children":[]},{"level":3,"title":"数组初始化","slug":"数组初始化","link":"#数组初始化","children":[]}]},{"level":2,"title":"数组元素的表示","slug":"数组元素的表示","link":"#数组元素的表示","children":[{"level":3,"title":"格式","slug":"格式-7","link":"#格式-7","children":[]},{"level":3,"title":"数组的内存结构","slug":"数组的内存结构","link":"#数组的内存结构","children":[]}]},{"level":2,"title":"数组长度","slug":"数组长度","link":"#数组长度","children":[{"level":3,"title":"数组的遍历","slug":"数组的遍历","link":"#数组的遍历","children":[]},{"level":3,"title":"常见问题","slug":"常见问题","link":"#常见问题","children":[]},{"level":3,"title":"方法的定义格式","slug":"方法的定义格式","link":"#方法的定义格式","children":[]}]},{"level":2,"title":"方法调用格式","slug":"方法调用格式","link":"#方法调用格式","children":[{"level":3,"title":"注意：","slug":"注意-2","link":"#注意-2","children":[]},{"level":3,"title":"执行流程","slug":"执行流程-5","link":"#执行流程-5","children":[]}]},{"level":2,"title":"return的作用","slug":"return的作用","link":"#return的作用","children":[]},{"level":2,"title":"方法重载","slug":"方法重载","link":"#方法重载","children":[]},{"level":2,"title":"1.面向对象思想","slug":"_1-面向对象思想","link":"#_1-面向对象思想","children":[]},{"level":2,"title":"2.类和对象","slug":"_2-类和对象","link":"#_2-类和对象","children":[{"level":3,"title":"2.1概念","slug":"_2-1概念","link":"#_2-1概念","children":[]},{"level":3,"title":"2.2类的定义","slug":"_2-2类的定义","link":"#_2-2类的定义","children":[]},{"level":3,"title":"2.3 对象的创建和使用","slug":"_2-3-对象的创建和使用","link":"#_2-3-对象的创建和使用","children":[]},{"level":3,"title":"3.构造方法","slug":"_3-构造方法","link":"#_3-构造方法","children":[]}]},{"level":2,"title":"1.封装的概念","slug":"_1-封装的概念","link":"#_1-封装的概念","children":[]},{"level":2,"title":"2.成员变量私有化（封装的一种体现形式）","slug":"_2-成员变量私有化-封装的一种体现形式","link":"#_2-成员变量私有化-封装的一种体现形式","children":[{"level":3,"title":"2.1 private","slug":"_2-1-private","link":"#_2-1-private","children":[]},{"level":3,"title":"2.2 set/get方法","slug":"_2-2-set-get方法","link":"#_2-2-set-get方法","children":[]}]},{"level":2,"title":"3. this","slug":"_3-this","link":"#_3-this","children":[{"level":3,"title":"3.1小思考","slug":"_3-1小思考","link":"#_3-1小思考","children":[]}]},{"level":2,"title":"4.思考","slug":"_4-思考","link":"#_4-思考","children":[]},{"level":2,"title":"1.继承的概念","slug":"_1-继承的概念","link":"#_1-继承的概念","children":[{"level":3,"title":"1.1相关名词","slug":"_1-1相关名词","link":"#_1-1相关名词","children":[]}]},{"level":2,"title":"2.继承的格式","slug":"_2-继承的格式","link":"#_2-继承的格式","children":[]},{"level":2,"title":"3.继承的注意事项","slug":"_3-继承的注意事项","link":"#_3-继承的注意事项","children":[]},{"level":2,"title":"4.继承的优缺点","slug":"_4-继承的优缺点","link":"#_4-继承的优缺点","children":[{"level":3,"title":"4.1 优点","slug":"_4-1-优点","link":"#_4-1-优点","children":[]},{"level":3,"title":"4.2 缺点","slug":"_4-2-缺点","link":"#_4-2-缺点","children":[]}]},{"level":2,"title":"5.继承后成员相关语法","slug":"_5-继承后成员相关语法","link":"#_5-继承后成员相关语法","children":[{"level":3,"title":"5.1 成员变量","slug":"_5-1-成员变量","link":"#_5-1-成员变量","children":[]},{"level":3,"title":"5.2构造方法","slug":"_5-2构造方法","link":"#_5-2构造方法","children":[]},{"level":3,"title":"5.3 成员方法","slug":"_5-3-成员方法","link":"#_5-3-成员方法","children":[]}]},{"level":2,"title":"6.方法重写","slug":"_6-方法重写","link":"#_6-方法重写","children":[{"level":3,"title":"6.1 方法重写的概念","slug":"_6-1-方法重写的概念","link":"#_6-1-方法重写的概念","children":[]},{"level":3,"title":"6.2注意事项","slug":"_6-2注意事项","link":"#_6-2注意事项","children":[]},{"level":3,"title":"6.3 小思考","slug":"_6-3-小思考","link":"#_6-3-小思考","children":[]}]},{"level":2,"title":"7.this和super","slug":"_7-this和super","link":"#_7-this和super","children":[]},{"level":2,"title":"1.多态的概念","slug":"_1-多态的概念","link":"#_1-多态的概念","children":[]},{"level":2,"title":"2.多态的前提","slug":"_2-多态的前提","link":"#_2-多态的前提","children":[]},{"level":2,"title":"3.父类引用指向子类对象后成员访问的特点","slug":"_3-父类引用指向子类对象后成员访问的特点","link":"#_3-父类引用指向子类对象后成员访问的特点","children":[]},{"level":2,"title":"4.多态的应用场景","slug":"_4-多态的应用场景","link":"#_4-多态的应用场景","children":[]},{"level":2,"title":"5.多态的优缺点","slug":"_5-多态的优缺点","link":"#_5-多态的优缺点","children":[]},{"level":2,"title":"6.向上转型，向下转型","slug":"_6-向上转型-向下转型","link":"#_6-向上转型-向下转型","children":[{"level":3,"title":"6.1向上转型","slug":"_6-1向上转型","link":"#_6-1向上转型","children":[]},{"level":3,"title":"6.2向下转型","slug":"_6-2向下转型","link":"#_6-2向下转型","children":[]},{"level":3,"title":"6.3 instanceof进行类型判断","slug":"_6-3-instanceof进行类型判断","link":"#_6-3-instanceof进行类型判断","children":[]}]},{"level":2,"title":"7.思考题","slug":"_7-思考题","link":"#_7-思考题","children":[]},{"level":2,"title":"1.包和权限修饰符","slug":"_1-包和权限修饰符","link":"#_1-包和权限修饰符","children":[{"level":3,"title":"1.1 包","slug":"_1-1-包","link":"#_1-1-包","children":[]},{"level":3,"title":"1.2权限修饰符","slug":"_1-2权限修饰符","link":"#_1-2权限修饰符","children":[]}]},{"level":2,"title":"2.static","slug":"_2-static","link":"#_2-static","children":[{"level":3,"title":"2.1 静态成员的调用格式","slug":"_2-1-静态成员的调用格式","link":"#_2-1-静态成员的调用格式","children":[]},{"level":3,"title":"2.2注意事项","slug":"_2-2注意事项","link":"#_2-2注意事项","children":[]},{"level":3,"title":"2.3 理解","slug":"_2-3-理解","link":"#_2-3-理解","children":[]},{"level":3,"title":"2.4使用场景","slug":"_2-4使用场景","link":"#_2-4使用场景","children":[]}]},{"level":2,"title":"3.final","slug":"_3-final","link":"#_3-final","children":[]},{"level":2,"title":"1.为什么要抽象","slug":"_1-为什么要抽象","link":"#_1-为什么要抽象","children":[]},{"level":2,"title":"2.抽象类和抽象方法的格式","slug":"_2-抽象类和抽象方法的格式","link":"#_2-抽象类和抽象方法的格式","children":[{"level":3,"title":"2.1抽象方法","slug":"_2-1抽象方法","link":"#_2-1抽象方法","children":[]},{"level":3,"title":"2.2 抽象类","slug":"_2-2-抽象类","link":"#_2-2-抽象类","children":[]}]},{"level":2,"title":"3.抽象类的特点","slug":"_3-抽象类的特点","link":"#_3-抽象类的特点","children":[]},{"level":2,"title":"1.接口的概念","slug":"_1-接口的概念","link":"#_1-接口的概念","children":[]},{"level":2,"title":"2.接口的格式","slug":"_2-接口的格式","link":"#_2-接口的格式","children":[{"level":3,"title":"2.1定义格式","slug":"_2-1定义格式","link":"#_2-1定义格式","children":[]},{"level":3,"title":"2.2 实现接口","slug":"_2-2-实现接口","link":"#_2-2-实现接口","children":[]}]},{"level":2,"title":"3.接口中的成员","slug":"_3-接口中的成员","link":"#_3-接口中的成员","children":[{"level":3,"title":"3.1 常用成员","slug":"_3-1-常用成员","link":"#_3-1-常用成员","children":[]},{"level":3,"title":"3.2 新增成员","slug":"_3-2-新增成员","link":"#_3-2-新增成员","children":[]}]},{"level":2,"title":"4.继承实现关系","slug":"_4-继承实现关系","link":"#_4-继承实现关系","children":[]},{"level":2,"title":"5.抽象类和接口的使用区别","slug":"_5-抽象类和接口的使用区别","link":"#_5-抽象类和接口的使用区别","children":[]},{"level":2,"title":"1.局部代码块","slug":"_1-局部代码块","link":"#_1-局部代码块","children":[{"level":3,"title":"1.1格式","slug":"_1-1格式","link":"#_1-1格式","children":[]},{"level":3,"title":"1.2应用场景","slug":"_1-2应用场景","link":"#_1-2应用场景","children":[]}]},{"level":2,"title":"2.构造代码块","slug":"_2-构造代码块","link":"#_2-构造代码块","children":[{"level":3,"title":"2.1 格式","slug":"_2-1-格式","link":"#_2-1-格式","children":[]},{"level":3,"title":"2.2 调用时机","slug":"_2-2-调用时机","link":"#_2-2-调用时机","children":[]},{"level":3,"title":"2.3 应用场景","slug":"_2-3-应用场景","link":"#_2-3-应用场景","children":[]}]},{"level":2,"title":"3.静态代码块","slug":"_3-静态代码块","link":"#_3-静态代码块","children":[{"level":3,"title":"3.1 格式","slug":"_3-1-格式","link":"#_3-1-格式","children":[]},{"level":3,"title":"3.2 调用时机","slug":"_3-2-调用时机","link":"#_3-2-调用时机","children":[]},{"level":3,"title":"3.3 应用场景","slug":"_3-3-应用场景","link":"#_3-3-应用场景","children":[]}]},{"level":2,"title":"1.局部内部类","slug":"_1-局部内部类","link":"#_1-局部内部类","children":[{"level":3,"title":"1.1 格式","slug":"_1-1-格式","link":"#_1-1-格式","children":[]},{"level":3,"title":"1.2 应用场景","slug":"_1-2-应用场景","link":"#_1-2-应用场景","children":[]},{"level":3,"title":"1.3 注意事项","slug":"_1-3-注意事项","link":"#_1-3-注意事项","children":[]}]},{"level":2,"title":"2.成员内部类","slug":"_2-成员内部类","link":"#_2-成员内部类","children":[{"level":3,"title":"2.1 格式","slug":"_2-1-格式-1","link":"#_2-1-格式-1","children":[]},{"level":3,"title":"2.2 特点","slug":"_2-2-特点","link":"#_2-2-特点","children":[]},{"level":3,"title":"2.3 应用场景","slug":"_2-3-应用场景-1","link":"#_2-3-应用场景-1","children":[]}]},{"level":2,"title":"3.静态内部类","slug":"_3-静态内部类","link":"#_3-静态内部类","children":[{"level":3,"title":"3.1 格式","slug":"_3-1-格式-1","link":"#_3-1-格式-1","children":[]},{"level":3,"title":"3.2 特点","slug":"_3-2-特点","link":"#_3-2-特点","children":[]},{"level":3,"title":"3.2 应用场景","slug":"_3-2-应用场景","link":"#_3-2-应用场景","children":[]}]},{"level":2,"title":"4.匿名内部类","slug":"_4-匿名内部类","link":"#_4-匿名内部类","children":[{"level":3,"title":"4.1 格式","slug":"_4-1-格式","link":"#_4-1-格式","children":[]},{"level":3,"title":"4.2 应用场景","slug":"_4-2-应用场景","link":"#_4-2-应用场景","children":[]}]},{"level":2,"title":"1.Object(祖宗类)","slug":"_1-object-祖宗类","link":"#_1-object-祖宗类","children":[]},{"level":2,"title":"API文档","slug":"api文档","link":"#api文档","children":[{"level":3,"title":"1.1概述","slug":"_1-1概述","link":"#_1-1概述","children":[]},{"level":3,"title":"1.2 常用方法","slug":"_1-2-常用方法","link":"#_1-2-常用方法","children":[]}]},{"level":2,"title":"2.String","slug":"_2-string","link":"#_2-string","children":[{"level":3,"title":"2.1 概述","slug":"_2-1-概述","link":"#_2-1-概述","children":[]},{"level":3,"title":"2.2 对象创建","slug":"_2-2-对象创建","link":"#_2-2-对象创建","children":[]},{"level":3,"title":"2.3 常用方法","slug":"_2-3-常用方法","link":"#_2-3-常用方法","children":[]},{"level":3,"title":"2.4 特点","slug":"_2-4-特点","link":"#_2-4-特点","children":[]}]},{"level":2,"title":"3.包装类","slug":"_3-包装类","link":"#_3-包装类","children":[{"level":3,"title":"3.1概述","slug":"_3-1概述","link":"#_3-1概述","children":[]},{"level":3,"title":"3.2 创建对象","slug":"_3-2-创建对象","link":"#_3-2-创建对象","children":[]},{"level":3,"title":"3.3 常用方法","slug":"_3-3-常用方法","link":"#_3-3-常用方法","children":[]},{"level":3,"title":"3.4 自动装箱与自动拆箱","slug":"_3-4-自动装箱与自动拆箱","link":"#_3-4-自动装箱与自动拆箱","children":[]}]},{"level":2,"title":"4.StringBuilder","slug":"_4-stringbuilder","link":"#_4-stringbuilder","children":[{"level":3,"title":"4.1 概述","slug":"_4-1-概述","link":"#_4-1-概述","children":[]},{"level":3,"title":"4.2 创建对象","slug":"_4-2-创建对象","link":"#_4-2-创建对象","children":[]},{"level":3,"title":"4.3 常用方法","slug":"_4-3-常用方法","link":"#_4-3-常用方法","children":[]}]},{"level":2,"title":"1.异常继承体系","slug":"_1-异常继承体系","link":"#_1-异常继承体系","children":[]},{"level":2,"title":"2.异常处理","slug":"_2-异常处理","link":"#_2-异常处理","children":[{"level":3,"title":"2.1throws声明抛出异常","slug":"_2-1throws声明抛出异常","link":"#_2-1throws声明抛出异常","children":[]},{"level":3,"title":"2.2try...catch抓取异常","slug":"_2-2try-catch抓取异常","link":"#_2-2try-catch抓取异常","children":[]}]},{"level":2,"title":"3.自定义异常","slug":"_3-自定义异常","link":"#_3-自定义异常","children":[]},{"level":2,"title":"4.异常的作用","slug":"_4-异常的作用","link":"#_4-异常的作用","children":[]},{"level":2,"title":"1.集合的概念","slug":"_1-集合的概念","link":"#_1-集合的概念","children":[]},{"level":2,"title":"2.集合体系结构","slug":"_2-集合体系结构","link":"#_2-集合体系结构","children":[]},{"level":2,"title":"3.常用list集合","slug":"_3-常用list集合","link":"#_3-常用list集合","children":[{"level":3,"title":"3.1 list集合的特点","slug":"_3-1-list集合的特点","link":"#_3-1-list集合的特点","children":[]},{"level":3,"title":"3.2 ArrayList","slug":"_3-2-arraylist","link":"#_3-2-arraylist","children":[]},{"level":3,"title":"3.3 LinkedList","slug":"_3-3-linkedlist","link":"#_3-3-linkedlist","children":[]},{"level":3,"title":"3.4 ArrayList和LinkedList的区别","slug":"_3-4-arraylist和linkedlist的区别","link":"#_3-4-arraylist和linkedlist的区别","children":[]}]},{"level":2,"title":"1.常用Set集合","slug":"_1-常用set集合","link":"#_1-常用set集合","children":[{"level":3,"title":"1.1 Set集合的特点","slug":"_1-1-set集合的特点","link":"#_1-1-set集合的特点","children":[]},{"level":3,"title":"1.2 HashSet","slug":"_1-2-hashset","link":"#_1-2-hashset","children":[]}]},{"level":2,"title":"2.泛型","slug":"_2-泛型","link":"#_2-泛型","children":[{"level":3,"title":"2.1 概述","slug":"_2-1-概述-1","link":"#_2-1-概述-1","children":[]},{"level":3,"title":"2.2 使用","slug":"_2-2-使用","link":"#_2-2-使用","children":[]},{"level":3,"title":"2.3 泛型上限&泛型下限","slug":"_2-3-泛型上限-泛型下限","link":"#_2-3-泛型上限-泛型下限","children":[]}]},{"level":2,"title":"1.常用Map集合","slug":"_1-常用map集合","link":"#_1-常用map集合","children":[{"level":3,"title":"1.1 Map集合的概述","slug":"_1-1-map集合的概述","link":"#_1-1-map集合的概述","children":[]},{"level":3,"title":"1.2HashMap","slug":"_1-2hashmap","link":"#_1-2hashmap","children":[]},{"level":3,"title":"1.3 HashMap的key去重原理","slug":"_1-3-hashmap的key去重原理","link":"#_1-3-hashmap的key去重原理","children":[]}]},{"level":2,"title":"1.File","slug":"_1-file","link":"#_1-file","children":[{"level":3,"title":"1.1 概述","slug":"_1-1-概述","link":"#_1-1-概述","children":[]},{"level":3,"title":"1.2 创建对象","slug":"_1-2-创建对象","link":"#_1-2-创建对象","children":[]},{"level":3,"title":"1.3 常用方法","slug":"_1-3-常用方法","link":"#_1-3-常用方法","children":[]},{"level":3,"title":"1.4 重要方法","slug":"_1-4-重要方法","link":"#_1-4-重要方法","children":[]}]},{"level":2,"title":"2.递归","slug":"_2-递归","link":"#_2-递归","children":[]},{"level":2,"title":"1.IO流概述","slug":"_1-io流概述","link":"#_1-io流概述","children":[]},{"level":2,"title":"2.IO流的分类","slug":"_2-io流的分类","link":"#_2-io流的分类","children":[]},{"level":2,"title":"3.字节输入流","slug":"_3-字节输入流","link":"#_3-字节输入流","children":[{"level":3,"title":"3.1 FileInputStream概述","slug":"_3-1-fileinputstream概述","link":"#_3-1-fileinputstream概述","children":[]},{"level":3,"title":"3.2 FIleInputStream对象创建","slug":"_3-2-fileinputstream对象创建","link":"#_3-2-fileinputstream对象创建","children":[]},{"level":3,"title":"3.3 读取数据","slug":"_3-3-读取数据","link":"#_3-3-读取数据","children":[]},{"level":3,"title":"3.4 资源释放","slug":"_3-4-资源释放","link":"#_3-4-资源释放","children":[]}]},{"level":2,"title":"4.字节输出流","slug":"_4-字节输出流","link":"#_4-字节输出流","children":[{"level":3,"title":"4.1 FileOutputStream概述","slug":"_4-1-fileoutputstream概述","link":"#_4-1-fileoutputstream概述","children":[]},{"level":3,"title":"4.2 FileOutputStream对象创建","slug":"_4-2-fileoutputstream对象创建","link":"#_4-2-fileoutputstream对象创建","children":[]},{"level":3,"title":"4.3 写数据","slug":"_4-3-写数据","link":"#_4-3-写数据","children":[]},{"level":3,"title":"4.4 文件续写","slug":"_4-4-文件续写","link":"#_4-4-文件续写","children":[]}]},{"level":2,"title":"5.练习","slug":"_5-练习","link":"#_5-练习","children":[{"level":3,"title":"5.1 文件复制","slug":"_5-1-文件复制","link":"#_5-1-文件复制","children":[]},{"level":3,"title":"5.2 文件夹复制","slug":"_5-2-文件夹复制","link":"#_5-2-文件夹复制","children":[]}]},{"level":2,"title":"1.编码表","slug":"_1-编码表","link":"#_1-编码表","children":[{"level":3,"title":"1.1 常见的编码表","slug":"_1-1-常见的编码表","link":"#_1-1-常见的编码表","children":[]}]},{"level":2,"title":"2.字符流","slug":"_2-字符流","link":"#_2-字符流","children":[{"level":3,"title":"2.1 字符输入流","slug":"_2-1-字符输入流","link":"#_2-1-字符输入流","children":[]},{"level":3,"title":"2.2 字符输出流","slug":"_2-2-字符输出流","link":"#_2-2-字符输出流","children":[]}]},{"level":2,"title":"练习","slug":"练习","link":"#练习","children":[]},{"level":2,"title":"1.高效缓冲流","slug":"_1-高效缓冲流","link":"#_1-高效缓冲流","children":[{"level":3,"title":"1.1概述","slug":"_1-1概述-1","link":"#_1-1概述-1","children":[]},{"level":3,"title":"1.2 分类","slug":"_1-2-分类","link":"#_1-2-分类","children":[]},{"level":3,"title":"1.2 对象的创建","slug":"_1-2-对象的创建","link":"#_1-2-对象的创建","children":[]},{"level":3,"title":"1.3 特有的方法","slug":"_1-3-特有的方法","link":"#_1-3-特有的方法","children":[]}]}],"relativePath":"java/Java.md","lastUpdated":1681917910000}'),E={name:"java/Java.md"},i=e(`<h1 id="windows操作系统" tabindex="-1">Windows操作系统 <a class="header-anchor" href="#windows操作系统" aria-hidden="true">#</a></h1><h3 id="打开控制台的几种方式" tabindex="-1">打开控制台的几种方式： <a class="header-anchor" href="#打开控制台的几种方式" aria-hidden="true">#</a></h3><p>Win +R 之后输入cmd打开 在Windows资源管理器界面搜索框输入cmd打开 在文件夹内按住shift键之后右击点击打开shell命令行</p><h5 id="windows环境下的dos命令" tabindex="-1">Windows环境下的dos命令： <a class="header-anchor" href="#windows环境下的dos命令" aria-hidden="true">#</a></h5><p>help:帮助命令，直接输入help会显 示所有的dos命令 help+具体指令名，会显示详细的指令帮助文档 help dir 碰到不会使用的命令，问一下help怎么使用</p><h5 id="dir命令" tabindex="-1">dir命令： <a class="header-anchor" href="#dir命令" aria-hidden="true">#</a></h5><p>查看当前目录下的文件（相当于linux环境下的ls）</p><h5 id="cd命令" tabindex="-1">cd命令： <a class="header-anchor" href="#cd命令" aria-hidden="true">#</a></h5><p>进入到指定文件夹or返回上一级文件夹</p><p>cd 目标文件夹 cd .. 返回上一级</p><h5 id="cls命令" tabindex="-1">cls命令： <a class="header-anchor" href="#cls命令" aria-hidden="true">#</a></h5><p>清楚屏幕</p><h5 id="切换盘符命令" tabindex="-1">切换盘符命令： <a class="header-anchor" href="#切换盘符命令" aria-hidden="true">#</a></h5><p>直接输入想要进入到的盘符，后面加冒号</p><h5 id="mkdir命令" tabindex="-1">mkdir命令： <a class="header-anchor" href="#mkdir命令" aria-hidden="true">#</a></h5><p>创建文件夹</p><h6 id="notepad命令-类似于vim编辑器" tabindex="-1">notepad命令（类似于vim编辑器）： <a class="header-anchor" href="#notepad命令-类似于vim编辑器" aria-hidden="true">#</a></h6><p>创建记事本 打开记事本，notepad+记事本的名字</p><h6 id="find命令" tabindex="-1">find命令： <a class="header-anchor" href="#find命令" aria-hidden="true">#</a></h6><p>在一个或多个文件中搜索一个文本字符串</p><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>help</td><td>查看帮助文档</td></tr><tr><td>盘符名称：</td><td>盘符切换。E:回车，表示切换到E盘</td></tr><tr><td>dir</td><td>查看当前路径下的内容。</td></tr><tr><td>cd 目录名</td><td>进入单级目录。 cd aaa</td></tr><tr><td>cd ..</td><td>回退到上一级目录 cd ..</td></tr><tr><td>cls</td><td>清屏。</td></tr></tbody></table><h2 id="jvm、jre、jdk" tabindex="-1">JVM、JRE、JDK <a class="header-anchor" href="#jvm、jre、jdk" aria-hidden="true">#</a></h2><p>JVM (ava VirtualMachine）是JAVA虚拟机所有的JAVA程序都要在jvm上运行 JRE (Java Runtime Environment)是JAVA的运行环境，包含了JVM和JAVA的核心类库 JDK (Java Development Kit)称为JAVA开发工具，包含了JRE和开发工具</p><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/image-20221124153605734.png" alt="image-20221124153605734"></p><h6 id="要开发首先要安装java的jdk" tabindex="-1">要开发首先要安装java的JDK <a class="header-anchor" href="#要开发首先要安装java的jdk" aria-hidden="true">#</a></h6><p>安装JDK时不要装到C盘，不要有中文目录 安转完成之后需要配置环境变量，只有环境变量配置好了，才可以在其他目录下使用安装好的JDK</p><h6 id="环境变量的配置方式" tabindex="-1">环境变量的配置方式： <a class="header-anchor" href="#环境变量的配置方式" aria-hidden="true">#</a></h6><p>此电脑-&gt;右键属性-&gt;高级系统设置-&gt;环境变量-&gt;在系统栏添加项-&gt;变量名尽量用java开头，变量值为JDK的安装目录 选择path变量-&gt;编辑-&gt;添加一项内容为“%JAVA_HOME%\\bin”两个百分号中间为刚配置的变量名，然后把这一项内容移至最顶端 这样就可以在其他目录下使用java命令了</p><h6 id="编写第一个java程序" tabindex="-1">编写第一个java程序 <a class="header-anchor" href="#编写第一个java程序" aria-hidden="true">#</a></h6><p>新建一个.java文件，编辑代码 开启cmd控制台，然后用javac编译，编译完之后会生成一个.class的文件 用java空格加程序名字运行编译好的程序，后面不需要跟后缀名</p><h6 id="idea的安装与使用" tabindex="-1">IDEA的安装与使用 <a class="header-anchor" href="#idea的安装与使用" aria-hidden="true">#</a></h6><p>IDE就是一个编译器 eclipse之前是比较流行的，但是现在有点落后了 IDEA是目前主流的java集成开发环境</p><p>2021版本的试用30天需要先注册一个账号， 注册成功之后的操作，先配置jdk从java那个选项栏里面选择jdk找到之前下载安装的jdk文件夹，点击选择之后系统自动识别jdk版本</p><p>配置好jdk之后，新建一个空项目，名字随便给</p><p>建立好项目之后右键项目文件夹，新建一个class，名字随便，这个操作有点类似于webstorm，上手还是比较迅速的</p><p>在新文件的类名下面大括号内，输入psvm回车自动补齐主函数前面的变量名字以及括号内的内容，输入sout回车自动补齐System.out.println();只需要输入括号内要打印的东西就行，很方便了</p><h6 id="设置字体大小" tabindex="-1">设置字体大小： <a class="header-anchor" href="#设置字体大小" aria-hidden="true">#</a></h6><p>菜单栏&gt;file&gt;setting&gt;font&gt;设置（跟webstorm一样）</p><h6 id="包创建-为了更好的分类管理文件" tabindex="-1">包创建（为了更好的分类管理文件）： <a class="header-anchor" href="#包创建-为了更好的分类管理文件" aria-hidden="true">#</a></h6><p>右键文件夹，选择package，创建文件夹，可以是一个，也可以是多级的，新建一个com文件夹，新建一个com.sangeng的意思是在com文件夹下有个子文件夹sangeng，这时候我们可以在这个包下面进行创建类，编写代码，更有利于我们分类管理文件</p><h2 id="注释" tabindex="-1">注释： <a class="header-anchor" href="#注释" aria-hidden="true">#</a></h2><p>java中有三种注释方式：</p><p>单行注释、多行注释、文档注释</p><h4 id="idea快捷键" tabindex="-1">IDEA快捷键 <a class="header-anchor" href="#idea快捷键" aria-hidden="true">#</a></h4><table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>增加或取消单行注释</td><td>ctrl+/</td></tr><tr><td>增加或取消多行注释</td><td>ctrl+shift+/</td></tr><tr><td>文档注释</td><td>输入/**+enter</td></tr></tbody></table><h5 id="字面值" tabindex="-1">字面值： <a class="header-anchor" href="#字面值" aria-hidden="true">#</a></h5><ul><li><p>整数值 没有小数点后面的东西 100，1,20 1 2 3</p></li><li><p>小数值 带小数点的（浮点型）100.1</p></li><li><p>字符值 单引号引起来的一个字符 &#39;a&#39; &#39;b&#39; &#39;c&#39; &#39;1&#39; &#39;2&#39; &#39;3&#39;</p></li><li><p>字符串值 双引号引起来的一串字符 &quot;asdfasdfaqwerqwerasdf&quot; &quot;123123141&quot;</p></li><li><p>布尔值 用来表示真或假 true和false 即0和1 对 错 真 假 1 0</p></li><li><p>空值 代表空值，null 空的 没有东西</p></li></ul><h4 id="计算机存储单位" tabindex="-1">计算机存储单位： <a class="header-anchor" href="#计算机存储单位" aria-hidden="true">#</a></h4><p>位（bit)：是计算机中数据最小的单位。</p><p>字节（Byte，B）：计算机中数据的基本单位，每8位组成一个字节。</p><h6 id="各个单位的换算关系" tabindex="-1">各个单位的换算关系： <a class="header-anchor" href="#各个单位的换算关系" aria-hidden="true">#</a></h6><p>1B(字节) = 8bit</p><p>1KB = 1024B</p><p>1MB = 1024KB</p><p>1GB = 1024MB</p><p>1TB = 1024GB</p><h3 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-hidden="true">#</a></h3><p>java中有两种数据类型，基本数据类型和引用数据类型</p><img title="" src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/202201032222121.png" alt="" width="476" data-align="inline"><h4 id="整数型" tabindex="-1">整数型 <a class="header-anchor" href="#整数型" aria-hidden="true">#</a></h4><ul><li>byte 1字节</li><li>short 2字节</li><li>int 4字节</li><li>long 8字节</li></ul><h4 id="浮点型" tabindex="-1">浮点型 <a class="header-anchor" href="#浮点型" aria-hidden="true">#</a></h4><ul><li>float</li><li>double</li></ul><h4 id="字符型" tabindex="-1">字符型 <a class="header-anchor" href="#字符型" aria-hidden="true">#</a></h4><ul><li>char</li></ul><h4 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-hidden="true">#</a></h4><ul><li>string</li></ul><h4 id="布尔型" tabindex="-1">布尔型 <a class="header-anchor" href="#布尔型" aria-hidden="true">#</a></h4><ul><li>boolean</li></ul><p><strong>在java当中，我们写的整数值默认就是int类型，小数值默认就是double类型</strong></p><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-hidden="true">#</a></h2><p>在程序运行过程中我们要对一些临时的数据进行保存和存储，这个就是变量。</p><p>在程序运行的过程中，变量的值可以在一定范围内变化的。</p><h4 id="定义格式" tabindex="-1">定义格式 <a class="header-anchor" href="#定义格式" aria-hidden="true">#</a></h4><p>1.光定义，不赋值</p><p>格式：<strong>数据类型 变量名；</strong></p><p>int num;</p><p>2.定义并赋值</p><p>格式：数据类型 变量名 = 初始化值；</p><p>int num = 1024；</p><p>3.一次定义多个变量（不推荐使用）</p><p>int a = 10,b = 20;</p><p>int c,d;</p><h5 id="变量的使用" tabindex="-1">变量的使用 <a class="header-anchor" href="#变量的使用" aria-hidden="true">#</a></h5><p>变量在定义完成后，直接使用该变量名就可以引用</p><h5 id="作用域" tabindex="-1">作用域 <a class="header-anchor" href="#作用域" aria-hidden="true">#</a></h5><ol><li><p>变量定义之后有一个作用范围，他的作用只在定义他的那个大括号内，出了大括号就没有用了</p></li><li><p>在同一个作用范围内不允许有重名的变量。</p></li><li><p>变量在使用之前必须先初始化</p></li><li><p>定义long类型的时候，赋值时需要在数据后面加L,表示长整型（java中正常的整数值默认是int类型的，所以要加l后缀表示长整型）</p></li><li><p>给float赋值的时候，直接写小数会报错，因为默认小数值是double类型的，这时候需要用F表示（大小写都可以推荐使用大写）；</p></li></ol><h6 id="报错的处理方案" tabindex="-1">报错的处理方案： <a class="header-anchor" href="#报错的处理方案" aria-hidden="true">#</a></h6><p>报错之后，idea会有标红，这时候使用alt+enter可以使用系统提供的解决方案</p><h3 id="数据类型转换" tabindex="-1">数据类型转换 <a class="header-anchor" href="#数据类型转换" aria-hidden="true">#</a></h3><h5 id="自动类型转换" tabindex="-1">自动类型转换 <a class="header-anchor" href="#自动类型转换" aria-hidden="true">#</a></h5><p>数据绝对安全的类型转换是可以自动转换的，直接写即可</p><ul><li><p>小的数据放到大的容器里面是安全的，这时候会自动转换 例如：int类型的值转换为long</p></li><li><p>相反的long类型转换为int类型时，这时候是不安全的，数据大的话转换过程中可能会丢失数据，所以是不安全的，不会自动转换</p></li><li><p>把int 类型的转换成double类型的 这也是安全的</p></li><li><p>double类型转换成int类型 ，小数部分会丢失， 所以是不安全的</p></li><li><p>总之 小的东西转换到大的是安全的 反之不安全</p></li></ul><h4 id="强制类型转换" tabindex="-1">强制类型转换 <a class="header-anchor" href="#强制类型转换" aria-hidden="true">#</a></h4><p>转换后可能导致出现问题（数据溢出，丢失数据精度）的类型转换叫做强制类型转换。因为可能会出现问题，必须给计算机声明一下，我就是要转换，出了问题算我的</p><h6 id="书写格式-前面加小括号即可" tabindex="-1">书写格式(前面加小括号即可)： <a class="header-anchor" href="#书写格式-前面加小括号即可" aria-hidden="true">#</a></h6><p>目标数据类型 变量名 = （目标数据类型）值或者变量；</p><p>int a = (int)a;</p><h4 id="标识符-变量名字" tabindex="-1">标识符（变量名字）： <a class="header-anchor" href="#标识符-变量名字" aria-hidden="true">#</a></h4><h6 id="java中的命名规则" tabindex="-1">Java中的命名规则 <a class="header-anchor" href="#java中的命名规则" aria-hidden="true">#</a></h6><h4 id="命名规则" tabindex="-1">命名规则 <a class="header-anchor" href="#命名规则" aria-hidden="true">#</a></h4><ul><li><p>由字母、数字、下划线，美元符号“$”组成</p></li><li><p>不能使用数字开头</p></li><li><p>不能使用java中的关键字用作名字</p></li></ul><h4 id="命名规范" tabindex="-1">命名规范 <a class="header-anchor" href="#命名规范" aria-hidden="true">#</a></h4><ul><li><p>小驼峰式命名：变量名、方法名（函数名）</p><p>首字母小写，从第二个单词开始每个单词的首字母大写。例如setAge getAge</p></li><li><p>大驼峰式命名：类名</p><p>每个单词的首字母都大写。例如HelloWorld FileUploadController</p></li><li><p>标识符要见名知意，不要采用拼音和英文混写的方式，尽量都要用英文</p></li></ul><h3 id="scanner-键盘录入数据" tabindex="-1">Scanner-键盘录入数据 <a class="header-anchor" href="#scanner-键盘录入数据" aria-hidden="true">#</a></h3><p>我们可以通过scanner类来获取用户的键盘录入数据。</p><h4 id="使用步骤" tabindex="-1">使用步骤 <a class="header-anchor" href="#使用步骤" aria-hidden="true">#</a></h4><p>1、导包。</p><p>import java.util.Scanner;</p><p>2、创建对象</p><p>Scanner sc = new Scanner(<a href="http://System.in" target="_blank" rel="noreferrer">System.in</a>);</p><p>3、接受用户录入的数据并存储</p><p>int num = sc.nextInt();</p><h4 id="算数运算符" tabindex="-1">算数运算符 <a class="header-anchor" href="#算数运算符" aria-hidden="true">#</a></h4><table><thead><tr><th>符号</th><th>作用</th><th>不同之处</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>单纯的使用数字的时候和数学中的加号没有区别</td></tr><tr><td>-</td><td>减</td><td>无</td></tr><tr><td>*</td><td>乘</td><td>无</td></tr><tr><td>/</td><td>除</td><td>整数相除只能得到整数，如果想要得到小数必须使用带小数点的值参与计算，<strong>例如：10/3 = 3而不是3.333</strong></td></tr><tr><td>%</td><td>取余</td><td>获取两个数相除之后的余数  <strong>例如：10%3 = 1</strong></td></tr></tbody></table><p>如果字符参与了运算：</p><p>char类型参与算数运算符，会把字符转换成对应的数字（参照ASCII表）然后进行运算</p><p>字符&#39;A&#39;=65 &#39;a&#39; = 97</p><p>如果字符串参与了+运算：</p><p><strong>当+操作中出现字符串时，这个+是会<u>进行字符串的拼接</u>，而不会进行数据计算</strong></p><h4 id="赋值运算符" tabindex="-1">赋值运算符： <a class="header-anchor" href="#赋值运算符" aria-hidden="true">#</a></h4><p><strong>一个等号是赋值</strong></p><p>可以用来修改变量的值。复制运算符左边写要被修改的变量名，右边写参与计算的值，可以是具体的值，也可以是表达式或者变量</p><table><thead><tr><th>符号</th><th>功能</th><th>举例</th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>a=12,将10赋值给变量a</td></tr><tr><td>+=</td><td>加后赋值</td><td>a+=10;相当于a=(a的数据类型)(a+10);</td></tr><tr><td>-=</td><td>减后赋值</td><td>a-=10;相当于a=(a的数据类型)(a-10);</td></tr><tr><td>*=</td><td>乘后赋值</td><td>a*=b;//相当于a=(a的数据类型)(a*b);</td></tr><tr><td>/=</td><td>除后赋值</td><td>a/=b;//相当于a=(a的数据类型)(a/b);</td></tr><tr><td>%=</td><td>取余后赋值</td><td>a%=b;//相当于a=(a的数据类型)(a%b);</td></tr></tbody></table><h4 id="自增自减运算符" tabindex="-1">自增自减运算符 <a class="header-anchor" href="#自增自减运算符" aria-hidden="true">#</a></h4><table><thead><tr><th>符号</th><th>作用</th><th>举例</th></tr></thead><tbody><tr><td>++</td><td>自增</td><td>a++;相当于a=a+1;</td></tr><tr><td>--</td><td>自减</td><td>a--;相当于a=a-1;</td></tr></tbody></table><p>这里牵扯到++前置跟后置的区别，<strong>前置时，先自增</strong>，再参与赋值运算，<strong>后置时，先用当前的值，然后自增</strong></p><p>--运算符同上</p><h4 id="比较运算符" tabindex="-1">比较运算符 <a class="header-anchor" href="#比较运算符" aria-hidden="true">#</a></h4><p>一个等号是赋值，两个等号是 判断等于</p><table><thead><tr><th>==</th><th>比较左右两边是否相等</th></tr></thead><tbody><tr><td>&lt;</td><td>比较左边是否比右边小</td></tr><tr><td>&gt;</td><td>比较左边是否大于右边</td></tr><tr><td>&lt;=</td><td>比较左边是否小于等于右边</td></tr><tr><td>&gt;=</td><td>比较左边是否大于等于右边</td></tr><tr><td>!=</td><td>比较左右两边是否<strong>不相等</strong>，<em>不相等为true，相等为false</em></td></tr></tbody></table><h3 id="逻辑运算符" tabindex="-1">逻辑运算符 <a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a></h3><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>&amp;</td><td>逻辑与</td><td>理解成并且的意思，左右两边都要为真才为真</td></tr><tr><td>|</td><td>逻辑或</td><td>逻辑或</td></tr><tr><td>^</td><td>逻辑异或</td><td>左右两边不同结果才为真</td></tr><tr><td>!</td><td>逻辑非</td><td>取反</td></tr><tr><td>&amp;&amp;</td><td>短路与</td><td>作用和&amp;相同，但是有短路效果</td></tr><tr><td>||</td><td>短路或</td><td>短路或</td></tr></tbody></table><p>在程序中常用的是短路与跟短路或，这样节省时间，前面的结果已经出来了，后面就没有计算的必要了</p><h5 id="三元运算符" tabindex="-1">三元运算符： <a class="header-anchor" href="#三元运算符" aria-hidden="true">#</a></h5><h5 id="格式" tabindex="-1">格式 <a class="header-anchor" href="#格式" aria-hidden="true">#</a></h5><p>布尔表达式？表达式1：表达式2；</p><h5 id="执行流程" tabindex="-1">执行流程 <a class="header-anchor" href="#执行流程" aria-hidden="true">#</a></h5><p>先判断布尔表达式的结果，如果为真，则执行表达式1，否则执行表达式2</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//键盘录入两个数比较大小</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//键盘录入两个数</span></span>
<span class="line"><span style="color:#E1E4E8;">        Scanner sc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Scanner</span><span style="color:#E1E4E8;">(System.in);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;请输入一个数：&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sc.</span><span style="color:#B392F0;">nextInt</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;请输入第二个数&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sc.</span><span style="color:#B392F0;">nextInt</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//判断大小</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">b</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">a</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">b;</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(result);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="流程控制语句-if" tabindex="-1">流程控制语句-if <a class="header-anchor" href="#流程控制语句-if" aria-hidden="true">#</a></h3><p>分支结构，最常用的流程控制语句</p><h5 id="格式-1" tabindex="-1">格式 <a class="header-anchor" href="#格式-1" aria-hidden="true">#</a></h5><p>if语句有三种部分组成</p><p>三个部分:</p><ol><li><p>if部分</p><p>if(判断表达式)</p><p>{</p><p>​ 语句块；</p><p>}</p></li><li><p>else if 部分</p><p>else if(判断表达式){</p><p>​ 语句块；</p><p>}</p><pre><code>  	3.  else部分
</code></pre><p>else(判断表达式){</p><p>​ 语句块；</p><p>}</p></li></ol><p>一个完整的if语句，首先在最前面有且仅有一个if部分，后面会有0个或多个else if语句，会有0个或1个else语句</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(判断表达式1){</span></span>
<span class="line"><span style="color:#E1E4E8;">	语句块1;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(判断表达式1){</span></span>
<span class="line"><span style="color:#E1E4E8;">    语句块1;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(判断表达式2{</span></span>
<span class="line"><span style="color:#E1E4E8;">    语句块2;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(判断表达式1){</span></span>
<span class="line"><span style="color:#E1E4E8;">    语句块1;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(判断表达式2{</span></span>
<span class="line"><span style="color:#E1E4E8;">    语句块2;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    语句块n</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h5 id="执行流程-1" tabindex="-1">执行流程 <a class="header-anchor" href="#执行流程-1" aria-hidden="true">#</a></h5><p>从上到下依次执行判断表达式</p><p>​ 结果为true：则执行后面紧跟着的语句体，语句体执行完了整个if语句就结束了</p><p>​ 结果为false：则继续执行判断下面的一个判断表达式</p><p>如果所有判断表达式的判断结果都为false，在有else语句的情况下执行else里面的语句，没有的话直接结束判断</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//输入年龄 判断是否可以进入网吧</span></span>
<span class="line"><span style="color:#E1E4E8;">        Scanner sc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Scanner</span><span style="color:#E1E4E8;">(System.in);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;请输入你的年龄&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sc.</span><span style="color:#B392F0;">nextInt</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//判断是否大于等于18</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">( age </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;可以进入网吧&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;未成年不可以进入网吧哦&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="注意" tabindex="-1">注意 <a class="header-anchor" href="#注意" aria-hidden="true">#</a></h4><p><strong>平时写代码的时候缩进要规范</strong></p><p>一旦执行了一个大括号中的语句体，整个if语句就结束了，不可能出现执行两个语句体的情况。</p><p><em>世界上最遥远的距离莫过于你在if里我在else里</em></p><p>如果大括号中的语句体只有一行代码，这时候可以把大括号省略，<strong>但是建议永远不要省略</strong></p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(a</span><span style="color:#F97583;">%</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(a</span><span style="color:#F97583;">%</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(b);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//上述代码这样写会报错，因为编译器觉得两个if有可能都不成立，这种情况就没有给赋值了，所以提示可能没有给b初始化值</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>上述代码这样写会报错，因为编译器觉得两个if有可能都不成立，这种情况就没有给赋值了，所以提示可能没有给b初始化值</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(a</span><span style="color:#F97583;">%</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">        b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(b);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>像下面这样写就可以了，因为编译器知道if和else必定会有一个被执行，执行之后b就有值了</p><h3 id="流程控制语句-switch" tabindex="-1">流程控制语句-switch <a class="header-anchor" href="#流程控制语句-switch" aria-hidden="true">#</a></h3><p>使用switch也可以根据判断不同的情况做不同的处理</p><h4 id="格式-2" tabindex="-1">格式 <a class="header-anchor" href="#格式-2" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;">(表达式){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> 值1</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        语句体1;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> 值2</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        语句体2;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> 值3</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        语句体3;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default:</span></span>
<span class="line"><span style="color:#E1E4E8;">        语句体n</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span></span>
<span class="line"><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> 值1</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        语句体1;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">//最后一个break语句可以省略，但是推荐不要省略</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>switch后面小括号当中只能是下列数据类型：</p><p>​ <strong>基本数据类型：byte/short/char/int</strong></p><p>​ <strong>引用数据类型：String字符串、enum枚举</strong></p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (num){</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">			System.out.</span><span style="color:#B392F0;">print1n</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">：</span></span>
<span class="line"><span style="color:#E1E4E8;">			system.out.print1n（</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">）;</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">			System.out.</span><span style="color:#B392F0;">print1n</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">default:</span></span>
<span class="line"><span style="color:#E1E4E8;">			system.out.</span><span style="color:#B392F0;">print7n</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;default&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 id="执行流程-2" tabindex="-1">执行流程 <a class="header-anchor" href="#执行流程-2" aria-hidden="true">#</a></h4><hr><p>从上到下依次看表达式结果和哪个case后面的值相同，相同就执行哪个case后面的语句体，碰到break就结束switch。</p><p>如果没有符合要求的case则执行default后面的语句体。</p><h4 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-hidden="true">#</a></h4><ol><li>switch可以没有default，但是一般都会加上</li><li>case语句后面不可以不加break，但是如果不加break就可能会出现case穿透的问题，匹配哪一个case就从哪一个位置向下执行，直到遇到了break或者整个switch结束为止</li></ol><h2 id="循环语句" tabindex="-1">循环语句 <a class="header-anchor" href="#循环语句" aria-hidden="true">#</a></h2><h3 id="for循环" tabindex="-1">for循环 <a class="header-anchor" href="#for循环" aria-hidden="true">#</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(初始化语句;条件判断表达式;步进语句){</span></span>
<span class="line"><span style="color:#E1E4E8;">    循环体;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;i </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(i);</span><span style="color:#6A737D;">//1 2 3 4 5 </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>执行流程</p><ol><li><p>先执行初始化语句</p></li><li><p>然后看布尔表达式的结果</p><ol><li>结果为true 执行循环体</li><li>结果为false循环结束</li></ol></li><li><p>循环体执行完之后执行步进语句，然后继续执行2判断布尔表达式的结果（注意：这里不是初始化语句）</p><p>然后以此类推。</p></li></ol><h4 id="注意-1" tabindex="-1">注意 <a class="header-anchor" href="#注意-1" aria-hidden="true">#</a></h4><ol><li><p>初始化语句、布尔表达式、步进语句之间是用分号分隔，而不是逗号。但是在初始化语句和步进语句部分，我们可以使用逗号将一系列的表达式隔开，那些语句均会独立执行。例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">j;i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">,j</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    循环体;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>无论初始化语句，布尔表达式，还是步进语句，都可以空着不写，但是分号不能少。例如：</p></li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(;;){</span></span>
<span class="line"><span style="color:#E1E4E8;">    循环体;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="3"><li><p>如果在初始化语句中定义了变量，那么这个变量只在循环中使用，循环结束了就超出了这个变量的作用域</p></li><li><p>也可以使用循环之外的变量</p></li></ol><h3 id="while循环" tabindex="-1">while循环 <a class="header-anchor" href="#while循环" aria-hidden="true">#</a></h3><h4 id="格式-3" tabindex="-1">格式 <a class="header-anchor" href="#格式-3" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(布尔表达式){</span></span>
<span class="line"><span style="color:#E1E4E8;">    循环体；</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(i </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">    i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="执行流程-3" tabindex="-1">执行流程 <a class="header-anchor" href="#执行流程-3" aria-hidden="true">#</a></h4><p>​ ①看布尔表达式的结果</p><p>​ 如果为false循环结束</p><p>​ 如果为true，则执行循环体。</p><p>​ ②循环体执行完后继续执行①以此类推</p><p>先看前几次循环 找到一个规律，然后看最后一次执行的结果</p><h3 id="do-while循环" tabindex="-1">do...while循环 <a class="header-anchor" href="#do-while循环" aria-hidden="true">#</a></h3><h4 id="格式-4" tabindex="-1">格式 <a class="header-anchor" href="#格式-4" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">do</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    循环体；</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(布尔表达式);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">do</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//让用户输入一个数字</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;请输入一个数字：&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sc.</span><span style="color:#B392F0;">nextInt</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(num </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>注意：while小括号后面必须跟一个分号。</p><h4 id="执行流程-4" tabindex="-1">执行流程 <a class="header-anchor" href="#执行流程-4" aria-hidden="true">#</a></h4><p>①执行循环体</p><p>②然后看布尔表达式的结果</p><p>​ 如果为true则继续执行循环体</p><p>​ 如果为false则结束循环</p><p>​ 以此类推</p><h2 id="循环总结" tabindex="-1">循环总结 <a class="header-anchor" href="#循环总结" aria-hidden="true">#</a></h2><p>循环之间都是可以相互转换的，所以用哪种循环都是可以的，一般最常用的是for循环，已知的情况下一般使用for循环，未知的循环或者是死循环需要用到while循环，do...while循环用的是最少的， 了解这个格式就可以了</p><h2 id="循环控制语句" tabindex="-1">循环控制语句 <a class="header-anchor" href="#循环控制语句" aria-hidden="true">#</a></h2><p>我们在循环过程中可能需要用到跳过某次或者某几次循环、甚至直接结束循环，这个时候我们就需要使用循环控制语句。</p><p>循环控制语句主要有两个：break,continue</p><h3 id="break" tabindex="-1">break <a class="header-anchor" href="#break" aria-hidden="true">#</a></h3><p>在循环过程中，遇到break 整个循环就结束了</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(i </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>注意：break只能出现在循环中或者switch中</p><h3 id="continue" tabindex="-1">continue <a class="header-anchor" href="#continue" aria-hidden="true">#</a></h3><p>如果在循环中碰到了continue，则跳过本次循环，继续下次循环</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(i </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="println输出完自动换行-print输出完不自动换行" tabindex="-1">println输出完自动换行，print输出完不自动换行 <a class="header-anchor" href="#println输出完自动换行-print输出完不自动换行" aria-hidden="true">#</a></h5><p>用循环写程序的时候，先去找规律，用最笨的方法找到规律之后，再去写代码，这样会事半功倍。磨刀不如砍柴工。</p><h2 id="random-生成随机数" tabindex="-1">Random-生成随机数 <a class="header-anchor" href="#random-生成随机数" aria-hidden="true">#</a></h2><p>我们可以通过Random类来生成随机数</p><h3 id="使用步骤-1" tabindex="-1">使用步骤 <a class="header-anchor" href="#使用步骤-1" aria-hidden="true">#</a></h3><p>1、导包</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.Random;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2、创建对象</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">Random r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Random</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>3、生成随机数</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> r.</span><span style="color:#B392F0;">nextInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">//小括号内表示生成的数字范围，10包含0-9，但是不包括10</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>演示：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#6A737D;">//导包</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.Random;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RandomDemo</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    Random r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Random</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> mum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> r.</span><span style="color:#B392F0;">nextInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">//【1-10】</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">num</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-hidden="true">#</a></h2><p>我们可以使用数组来保存同一个数据类型的多个数据</p><h3 id="数组的特点" tabindex="-1">数组的特点 <a class="header-anchor" href="#数组的特点" aria-hidden="true">#</a></h3><p>​ ①数组的长度一旦确定就不能改变</p><p>​ ②一个数组中元素的数据类型都是一样的</p><h3 id="数组初始化" tabindex="-1">数组初始化 <a class="header-anchor" href="#数组初始化" aria-hidden="true">#</a></h3><h4 id="动态初始化" tabindex="-1">动态初始化 <a class="header-anchor" href="#动态初始化" aria-hidden="true">#</a></h4><h5 id="格式-5" tabindex="-1">格式 <a class="header-anchor" href="#格式-5" aria-hidden="true">#</a></h5><p>​ 数据类型[]数组名 = new 数据类型[长度]；</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">];</span><span style="color:#6A737D;">//动态定义了一个长度为10的数组，数组元素为int类型</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="静态初始化" tabindex="-1">静态初始化 <a class="header-anchor" href="#静态初始化" aria-hidden="true">#</a></h4><h5 id="格式-6" tabindex="-1">格式 <a class="header-anchor" href="#格式-6" aria-hidden="true">#</a></h5><p>​ 标准格式：</p><p>数据类型[]数组名 = new 数据类型[]{元素值1，元素值2，元素值3，...}；</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[]{</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//省略写法</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> [] array </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>​ 省略格式（推荐使用）</p><p>​ 数据类型[] 数组名 = {元素值1，元素值2，元素值3，....};</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h4><p>​ 静态初始化和动态初始化都可以对数组进行初始化</p><p>​ 如果数组元素都确定好了，并且个数有限的情况下我们可以使用静态初始化，因为更方便。如果只能确定数组的长度，数组的元素值需要后面再赋值的话可以使用动态初始化。</p><h2 id="数组元素的表示" tabindex="-1">数组元素的表示 <a class="header-anchor" href="#数组元素的表示" aria-hidden="true">#</a></h2><h3 id="格式-7" tabindex="-1">格式 <a class="header-anchor" href="#格式-7" aria-hidden="true">#</a></h3><p>​ 数组名[索引值]；</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#6A737D;">//输出数组arr的第一个元素</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(arr[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#6A737D;">//修改数组第三个元素的值</span></span>
<span class="line"><span style="color:#E1E4E8;">arr[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="数组的内存结构" tabindex="-1">数组的内存结构 <a class="header-anchor" href="#数组的内存结构" aria-hidden="true">#</a></h3><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/image-20221121154421292.png" alt="image-20221121154421292"></p><p><strong>实际上，数组的试题保存在堆中，数组名实际保存的是数组实体的地址值</strong></p><h2 id="数组长度" tabindex="-1">数组长度 <a class="header-anchor" href="#数组长度" aria-hidden="true">#</a></h2><p>在java中我们可以非常方便的获取数组长度，格式如下：</p><p>​ 数组名.length;</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> arr[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">34</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(arr.length);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="数组的遍历" tabindex="-1">数组的遍历 <a class="header-anchor" href="#数组的遍历" aria-hidden="true">#</a></h3><p>​ 可以用for循环对数组进行一个遍历，配合length使用</p><div class="language-JAVA line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JAVA</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">45</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#6A737D;">//遍历数组输出元素</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">arr.length;i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(arr[i]);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-hidden="true">#</a></h3><p>数组索引越界异常ArrayIndexOutOfBoundsException</p><p><strong>在计算机中数组的下标是从0开始的，而不是从1开始的！！</strong></p><p>掌握代码调试，排查错误的能力！</p><h5 id="数组练习" tabindex="-1">数组练习 <a class="header-anchor" href="#数组练习" aria-hidden="true">#</a></h5><p>1.定义一个长度为100的int数组,要求里面的元素分别为1,3,5,7,9 最后还要把数组里面的每个元素都打印出来 2.定义一个长度为10的int数组，要求用户使用键盘录入分别给数组的每个元素赋值。最后计算出该数组所有元素 的总和，最大值，最小值并打印到控制台中。 3.定义2个长度为5的字符串数组arrA和arrB，arrA包含元素{&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;}，arrA中的所有元素按逆序存储在 数组arrB中, 在控制台打印输出arrB数组中所有元素 4.分析以下需求，并用代码实现： (1).定义一个int类型的数组，内容为{171,72,19,16,118,51,210,7,18} (2).求出该数组中特定元素的和，特定元素是指个位和十位不包含7的偶数。</p><p>5.分析以下需求，并用代码实现 定义一个数组，数组的元素为：{3，4，11，55，32，10，8，5}，要求使用代码对该数组进行从大到小的排序， 排序后的结果为{55, 32，11，10，8，5，4，3} 6.分析以下需求，并用代码实现 有一对兔子，从出生后第三个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都 不死，问第二十个月的兔子对数为多少？</p><h1 id="方法-函数" tabindex="-1">方法（函数） <a class="header-anchor" href="#方法-函数" aria-hidden="true">#</a></h1><p>我们在编程中会遇到一些固定套路的代码，我们可以把这些代码封装成方法，这样我们后面去使用的时候会更加方便，并且代码也会更简洁，代码复用性更高。</p><h3 id="方法的定义格式" tabindex="-1">方法的定义格式 <a class="header-anchor" href="#方法的定义格式" aria-hidden="true">#</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">修饰符 返回值类型 方法名(参数类型1 参数名1，参数类型2 参数名2，...){</span></span>
<span class="line"><span style="color:#E1E4E8;">    方法体；</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> 返回值；</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>​ 修饰符：目前阶段使用public static 后期学完权限修饰符和static等修饰符后可以灵活使用</p><p>​ 参数：执行方法所需要的的数据</p><p>​ 返回值：方法执行完后得到的结果</p><p>​ 方法体：方法中的代码</p><p>​ 返回值类型：返回类型就是结果的数据类型，如果没有结果就写成void</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">printInt</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> num){</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(num);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getSum</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> a,</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> b){</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">b;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="方法调用格式" tabindex="-1">方法调用格式 <a class="header-anchor" href="#方法调用格式" aria-hidden="true">#</a></h2><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">方法名（参数1，参数2...）；</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="注意-2" tabindex="-1">注意： <a class="header-anchor" href="#注意-2" aria-hidden="true">#</a></h3><p>​ 传参数时候方法定义里有几个参数就传几个参数。方法定义的时候参数是什么类型就传什么类型。</p><p>​ 如果方法有返回值，一般用变量来接收返回值，返回值是什么类型，就用什么类型的变量来接收。</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Demo</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">printInt</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">num</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(num);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getSum</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">b;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">Stirng</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">arg</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">printInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">printInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">         	</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> sum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getSum</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="方法练习题" tabindex="-1">方法练习题 <a class="header-anchor" href="#方法练习题" aria-hidden="true">#</a></h4><p>1.定义一个方法，该方法能够求两个整数中的最大值。定义完后尝试调用它。 1.1.定义一个方法，该方法能够打印两个整数的最大值。定义完后尝试调用它。 2.定义一个方法，该方法能够求三个整数中的最大值。定义完后尝试调用它。 3.定义一个方法，该方法可以把一个数组打印出来，打印格式如下：{1,2,3,4,5} 4.定义一个方法，该方法可以求一个数组中的最大值 5.定义一个方法，该方法可以把一个数组进行排序（从小到大） 6.定义一个方法，该方法可以获取一个任意长度的随机字符串，字符串中的字符可能是 英文大小写和数字</p><h3 id="执行流程-5" tabindex="-1">执行流程 <a class="header-anchor" href="#执行流程-5" aria-hidden="true">#</a></h3><p>程序运行过程中，遇到方法，先去调用方法，从函数里面执行完之后再返回到调用处，继续往下执行代码</p><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/image-20221121154534851.png" alt="image-20221121154534851"></p><p>函数先进栈，执行完成之后出栈，最后main函数也会出栈</p><h2 id="return的作用" tabindex="-1">return的作用 <a class="header-anchor" href="#return的作用" aria-hidden="true">#</a></h2><ol><li><p>返回方法的返回值</p></li><li><p>结束方法(return语句执行之后，整个方法就结束了)</p><p>只要有return就会返回，不管它后面有没有跟返回值</p></li></ol><h2 id="方法重载" tabindex="-1">方法重载 <a class="header-anchor" href="#方法重载" aria-hidden="true">#</a></h2><p>定义：在同一个类中，方法名相同，参数列表不同的方法才叫方法重载（与返回值无关）</p><p>参数列表不同：1.参数类型不同 2.参数个数不同 3.参数顺序不同</p><p>如何判断参数列表是否相同？把参数类型全部拼接成一个字符串，如果字符串的内容不同就算参数列表不同。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#6A737D;">//同一个类里面</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Demo</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">){}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">){}</span><span style="color:#6A737D;">//错误；与上面的参数类型一样了</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">c</span><span style="color:#E1E4E8;">){}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">y</span><span style="color:#E1E4E8;">){}</span><span style="color:#6A737D;">//错误，用来区分参数列表的是参数类型，而不是参数名字</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">){}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//两个double的顺序不同，也是可以的</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">){}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">){}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>调用同名字的方法之后，计算机会根据传入的参数类型，来选择执行哪个方法</p><p>一个方法只能有一个返回结果，但是可以通过数组的方式返回</p><h4 id="文档注释" tabindex="-1">文档注释 <a class="header-anchor" href="#文档注释" aria-hidden="true">#</a></h4><p>斜杠 星 星 回车 /**</p><h4 id="小思考" tabindex="-1">小思考 <a class="header-anchor" href="#小思考" aria-hidden="true">#</a></h4><p>形参：方法定义时写的参数</p><p>实参：方法调用时实际传入的值</p><p>问题：java中方法调用的时候，形参的改变会不会影响实参？</p><p>答：</p><p>如果方法的参数是基本数据类型，形参的改变不会影响实参，如果方法的参数是引用数据类型，形参的改变会影响实参</p><p>要根据情况而定，传入的值只是一个具体数据的时候，这个时候是通过值传递的方式，仅仅复制了一份值，不会改变实参的值，如果传进去的是地址值，这时候形参跟实参指向的都是同一个堆中的地址，所以这时候会改变堆中的内容</p><h1 id="面向对象基础" tabindex="-1">面向对象基础 <a class="header-anchor" href="#面向对象基础" aria-hidden="true">#</a></h1><h2 id="_1-面向对象思想" tabindex="-1">1.面向对象思想 <a class="header-anchor" href="#_1-面向对象思想" aria-hidden="true">#</a></h2><p>​ 面向对象的思想其实就是让我们去<strong>指挥别人</strong>或者是<strong>使用工具</strong>帮我们去把要做的事完成。</p><h2 id="_2-类和对象" tabindex="-1">2.类和对象 <a class="header-anchor" href="#_2-类和对象" aria-hidden="true">#</a></h2><h3 id="_2-1概念" tabindex="-1">2.1概念 <a class="header-anchor" href="#_2-1概念" aria-hidden="true">#</a></h3>`,333),y=e(`<p>类仅仅只是描述，我们要指挥事物，指挥的肯定是某类事物中的一个个体。我们去指挥或者使用事物的时候肯定时使用其中的具体的人个体，也就是对象。</p><h3 id="_2-2类的定义" tabindex="-1">2.2类的定义 <a class="header-anchor" href="#_2-2类的定义" aria-hidden="true">#</a></h3><p>我们去描述一类事物的共同点可以分成两种，一种是属性，一种是行为（技能）。</p><p>属性：具有具体指的共同点就是属性（例如：姓名，年龄，血量），我们用成员变量表示。</p><p>行为（技能）：具体的技能或者功能，这些都包含了一系列的动作。这些共同点就是行为，我们用成员方法表示。（例如：吃饭，睡觉）。</p><p>成员变量：定义在类中方法外的变量就是成员变量。</p><p>成员方法：没有static修饰的方法就是成员方法。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Phone</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//属性（成员变量）：品牌 价格 颜色</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//数据类型 变量名</span></span>
<span class="line"><span style="color:#E1E4E8;">    String brand;</span><span style="color:#6A737D;">//品牌</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> price;</span><span style="color:#6A737D;">//价格</span></span>
<span class="line"><span style="color:#E1E4E8;">    String color;</span><span style="color:#6A737D;">//颜色</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//行为（成员方法）：打电话 发短信</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;打电话&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sendMessage</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;发短信&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//    public static void main(String[] args) {</span></span>
<span class="line"><span style="color:#6A737D;">//        int num = 10;</span></span>
<span class="line"><span style="color:#6A737D;">//    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="_2-3-对象的创建和使用" tabindex="-1">2.3 对象的创建和使用 <a class="header-anchor" href="#_2-3-对象的创建和使用" aria-hidden="true">#</a></h3><h4 id="_2-3-1创建对象格式" tabindex="-1">2.3.1创建对象格式 <a class="header-anchor" href="#_2-3-1创建对象格式" aria-hidden="true">#</a></h4>`,10),d=s("strong",null,"类名 对象名 = new 类名();",-1),b=e(`<div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">Phone phone </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Phone</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">Student stu </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Student</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_2-3-2成员变量的使用格式" tabindex="-1">2.3.2成员变量的使用格式 <a class="header-anchor" href="#_2-3-2成员变量的使用格式" aria-hidden="true">#</a></h4>`,2),u=s("strong",null,"对象名.成员变量名",-1),F=e(`<p>注意：在定义的类中使用本类的变量名时“对象名.&quot;可以不写，直接写 成员变量名</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">Phone phone </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Phone</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">//设置phone的brand属性</span></span>
<span class="line"><span style="color:#E1E4E8;">phone.brand </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;huawei&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">//打印phone的brand属性</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_2-3-3成员变量的使用格式" tabindex="-1">2.3.3成员变量的使用格式 <a class="header-anchor" href="#_2-3-3成员变量的使用格式" aria-hidden="true">#</a></h4>`,3),h=s("strong",null,"对象名.方法名(参数)",-1),m=e(`<p>注意：在定义的类中使用本类的成员方法时“对象名.&quot;可以不写，直接写 方法名(参数);</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">Phone phone </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Phone</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">//使用phone的sendMessage方法</span></span>
<span class="line"><span style="color:#E1E4E8;">phone.</span><span style="color:#B392F0;">sendMessage</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_3-构造方法" tabindex="-1">3.构造方法 <a class="header-anchor" href="#_3-构造方法" aria-hidden="true">#</a></h3><h4 id="_3-1定义格式" tabindex="-1">3.1定义格式 <a class="header-anchor" href="#_3-1定义格式" aria-hidden="true">#</a></h4><p>构造方法的定义格式就是在普通成员方法的基础上加了两个强制性的要求。</p><p>要求：①没有返回值类型，连void都不能写！②方法名和类名必须相同</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Student</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//属性 成员变量  数据类型 变量名</span></span>
<span class="line"><span style="color:#E1E4E8;">    String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> age;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//构造方法 没有返回值类型 方法名和类名相同</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//有参构造</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Student</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">age</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> age;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//无参构造</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Student</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="_3-2调用格式" tabindex="-1">3.2调用格式 <a class="header-anchor" href="#_3-2调用格式" aria-hidden="true">#</a></h4>`,9),g=s("strong",null,"new 类名(参数)；",-1),v=e(`<div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">Student stu </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Student</span><span style="color:#E1E4E8;">();</span><span style="color:#6A737D;">//无参构造</span></span>
<span class="line"><span style="color:#E1E4E8;">Student stu1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Student</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;三更&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">//有参构造</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_3-3构造方法的作用" tabindex="-1">3.3构造方法的作用 <a class="header-anchor" href="#_3-3构造方法的作用" aria-hidden="true">#</a></h4>`,2),B=s("li",null,"创建对象",-1),_=s("li",null,"在创建对象的时候更便捷的对成员赋值",-1),C=e(`<h4 id="_3-4注意事项" tabindex="-1">3.4注意事项 <a class="header-anchor" href="#_3-4注意事项" aria-hidden="true">#</a></h4><p>​ <strong>如果一个类中没有写构造方法，编译器会默认送我们一个无参构造方法，但是如果自己写了，编译器就不会送了。这种情况下建议自己再加一个无参构造</strong></p><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/image-20221121154609269.png" alt="image-20221121154609269"></p><h1 id="面向对象-封装" tabindex="-1">面向对象-封装 <a class="header-anchor" href="#面向对象-封装" aria-hidden="true">#</a></h1><h2 id="_1-封装的概念" tabindex="-1">1.封装的概念 <a class="header-anchor" href="#_1-封装的概念" aria-hidden="true">#</a></h2><p>​ 封装其实就相当于把不需要用户了解细节（隐私或者特别复杂的细节）包装（隐藏）起来，只 仅对外提供公共访问方式。</p><h2 id="_2-成员变量私有化-封装的一种体现形式" tabindex="-1">2.成员变量私有化（封装的一种体现形式） <a class="header-anchor" href="#_2-成员变量私有化-封装的一种体现形式" aria-hidden="true">#</a></h2><p>​ 我们可以使用private来修饰成员变量，提供对应的set/get方法提供刚刚的访问方式。</p><h3 id="_2-1-private" tabindex="-1">2.1 private <a class="header-anchor" href="#_2-1-private" aria-hidden="true">#</a></h3><p>​ private是一个修饰符，他可以用来修饰类中的成员变量或者成员方法，被他修饰的成员变量只能在本类中访问，不能再其他类中直接访问</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Phone</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String brand;</span><span style="color:#6A737D;">//在成员变量定义的前面加上private修饰</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_2-2-set-get方法" tabindex="-1">2.2 set/get方法 <a class="header-anchor" href="#_2-2-set-get方法" aria-hidden="true">#</a></h3><p>​ setXxx方法用来对成员变量赋值，所以方法参数一般是和这个成员变量是同一个数据类型，没有返回值。</p><p>​ getXxx方法用来获取成员变量的值，所以方法一般是没有参数，有返回值，返回值类型就是这个成员变量的数据类型。</p><p>​ 注意：上面的Xxx代表成员变量名，注意遵循小驼峰命名规范</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//用private 修饰成员变量</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> age;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//用来给age设置值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setAge</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> age){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//判断输入的值是否符合规范，写在这里一劳永逸</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(age</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> age;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//用来获取age的值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getAge</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> age;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="_3-this" tabindex="-1">3. this <a class="header-anchor" href="#_3-this" aria-hidden="true">#</a></h2><p>​ this可以用来在局部变量和成员变量重名的时候区分它们，加了this就是成员变量。</p><p>​ 注意：我们只能在一个类的成员方法或者构造方法中使用this。</p><h3 id="_3-1小思考" tabindex="-1">3.1小思考 <a class="header-anchor" href="#_3-1小思考" aria-hidden="true">#</a></h3><p>​ this代表什么呢？代表当前的对象</p><h2 id="_4-思考" tabindex="-1">4.思考 <a class="header-anchor" href="#_4-思考" aria-hidden="true">#</a></h2><p>构造方法和set方法有什么区别？</p><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/image-20221121154643578.png" alt="image-20221121154643578"></p><p>构造方法只能在创建对象的时候调用一次，一旦创建成功了，我们再去修改他的值时，一定要使用set方法！</p><p>否则就会在堆中开辟新的内存空间，发生地址调包现象</p><h4 id="一个标准的类" tabindex="-1">一个标准的类 <a class="header-anchor" href="#一个标准的类" aria-hidden="true">#</a></h4><pre><code>1.  成员变量都用private修饰
2.  提供对应的get/set方法
3.  提供空参和全参构造
</code></pre><p>（以上可以使用alt+insert快捷键生成）</p><h1 id="面向对象-继承" tabindex="-1">面向对象-继承 <a class="header-anchor" href="#面向对象-继承" aria-hidden="true">#</a></h1><h2 id="_1-继承的概念" tabindex="-1">1.继承的概念 <a class="header-anchor" href="#_1-继承的概念" aria-hidden="true">#</a></h2><p>​ 继承可以理解为就是让两类事物产生从属关系，有了从属关系子类就肯定会具有父类的特征（弗雷中的非私有成员），这样我们用类去描述一些事物的时候就可以更方便</p><h3 id="_1-1相关名词" tabindex="-1">1.1相关名词 <a class="header-anchor" href="#_1-1相关名词" aria-hidden="true">#</a></h3><p>​ 超类，父类都是同一个概念就是叫法不同</p><p>​ 派生类，子类都是同一个概念也是叫法不同</p><h2 id="_2-继承的格式" tabindex="-1">2.继承的格式 <a class="header-anchor" href="#_2-继承的格式" aria-hidden="true">#</a></h2><p>​ 在子类名后面加extends 父类名</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Dog</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Animal</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//Dog就成为了Animal的一个子类</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_3-继承的注意事项" tabindex="-1">3.继承的注意事项 <a class="header-anchor" href="#_3-继承的注意事项" aria-hidden="true">#</a></h2><ul><li>Java中类只能单继承，一个类只能有一个父类，但可以多层继承</li></ul><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/image-20221121154712144.png" alt="image-20221121154712144"></p><ul><li>要有实际的从属关系才可以加上继承，不能不合逻辑的任意继承。</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#e1e4e8;">//把猫继承给狗，这样继承代码上看似没有报错，但是狗属于猫的一种有点不合逻辑！</span></span>
<span class="line"><span style="color:#e1e4e8;">//所以我们要找猫和狗的共同点，让他们继承与同一个父类</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_4-继承的优缺点" tabindex="-1">4.继承的优缺点 <a class="header-anchor" href="#_4-继承的优缺点" aria-hidden="true">#</a></h2><h3 id="_4-1-优点" tabindex="-1">4.1 优点 <a class="header-anchor" href="#_4-1-优点" aria-hidden="true">#</a></h3><p>​ 提高了代码的复用性</p><h3 id="_4-2-缺点" tabindex="-1">4.2 缺点 <a class="header-anchor" href="#_4-2-缺点" aria-hidden="true">#</a></h3><p>​ 增加了类和类之间的耦合性。违背了<strong>高内聚，低耦合</strong>原则</p><h2 id="_5-继承后成员相关语法" tabindex="-1">5.继承后成员相关语法 <a class="header-anchor" href="#_5-继承后成员相关语法" aria-hidden="true">#</a></h2><h3 id="_5-1-成员变量" tabindex="-1">5.1 成员变量 <a class="header-anchor" href="#_5-1-成员变量" aria-hidden="true">#</a></h3><pre><code>1. 父类非私有的成员变量才会继承给子类。所以当我们看到使用子类对象的某个成员变量时，有可能这个成员变量是定义在子类中，也有可能是定义在父类中的。
2. 父类中如果已经有了某个成员变量，我们不应该再在子类中定义同名的成员变量。否则可能会导致非常难排查的Bug。
</code></pre><h3 id="_5-2构造方法" tabindex="-1">5.2构造方法 <a class="header-anchor" href="#_5-2构造方法" aria-hidden="true">#</a></h3><pre><code>1. 构造方法不会继承给子类
2. 子类的构造中必须调用父类的构造并且要求在第一行。
3. 子类的构造默认都会在第一行调用父类的无参构造，所以当父类没有无参构造的时候子类构造中会报错。解决方案是给父类加上无参构造或者在子类构造中显示调用父类的有参构造。
</code></pre><h5 id="理解" tabindex="-1"><strong>理解</strong> <a class="header-anchor" href="#理解" aria-hidden="true">#</a></h5><p>问：继承的时候构造方法为什么不会被继承？</p><p><em>因为构造方法名必须和类名保持一致，继承了就不符合这个条件了</em></p><p>问：子类的构造方法会默认调用父类的无参构造super().为什么？</p><p>因为父类中可能有成员变量，并且这个成员变量是要继承给子类使用，但是在使用之前必须先赋值，而父类的成员变量只能用父类的构造方法进行初始化。即使你不调，编译器也会帮你自动调用，安全起见编译器会在你操作父类成员之前默认加上一句调用父类构造方法的语句。</p><p>问：在子类的构造方法中，能不能把父类的构造方法放到第二行？</p><p>不可以，编译器自动调用父类的构造方法是为了初始化，放到第二行的话，第一行就有可能会出错，所以编译器会报错。</p><h3 id="_5-3-成员方法" tabindex="-1">5.3 成员方法 <a class="header-anchor" href="#_5-3-成员方法" aria-hidden="true">#</a></h3><p>​ 父类非私有的成员方法会继承给子类。所以当我们看到使用子类对象的某个成员的成员方法时，有可能成员方法是定义在子类中。也有可能是定义在其父类中。</p><p>这里牵扯到方法重写，类似于函数重载。</p><h2 id="_6-方法重写" tabindex="-1">6.方法重写 <a class="header-anchor" href="#_6-方法重写" aria-hidden="true">#</a></h2><h3 id="_6-1-方法重写的概念" tabindex="-1">6.1 方法重写的概念 <a class="header-anchor" href="#_6-1-方法重写的概念" aria-hidden="true">#</a></h3><p>​ 当子类拥有父类继承下来的某个功能（成员方法），但是在子类中对这个方法的具体实现和父类不同。这个时候我们在子类中定义了一个和父类方法相同的方法（包括返回值类型，方法名，参数列表），这就叫做方法重写。</p><h3 id="_6-2注意事项" tabindex="-1">6.2注意事项 <a class="header-anchor" href="#_6-2注意事项" aria-hidden="true">#</a></h3><ul><li>我们在重写方法的时候方法的权限修饰符其实可以和父类不同**（一般都是相同）**。但是子类方法的权限不能比父类低。（<strong>权限修饰符：private &lt; 默认（什么都不写）&lt;protected &lt;public)</strong></li><li>​ 我们在重写方法的时候方法的返回值类型其实可以不同**（一般都相同）**。但是要求子类中方法的返回值类型必须是父类方法返回值类型的子类。</li><li>​ 我们可以使用@Override 注解来校验是不是方法重写。</li><li>​ 私有的方法不能被重写，因为私有的方法不会被继承</li></ul><h3 id="_6-3-小思考" tabindex="-1">6.3 小思考 <a class="header-anchor" href="#_6-3-小思考" aria-hidden="true">#</a></h3><p>面试题：说说overload和override的区别。</p><p>答：</p><p><strong>方法重载：在同一个类中，方法名相同，参数列表不同，和返回值无关</strong></p><p><strong>方法重写：在子父类中，子类有一个和父类方法名相同，参数列表相同，返回值类型也相同的方法。这个就叫方法重写。</strong></p><h2 id="_7-this和super" tabindex="-1">7.this和super <a class="header-anchor" href="#_7-this和super" aria-hidden="true">#</a></h2><p>​ this就代表本类的，super就代表父类的</p><p>使用：</p><ul><li>访问成员变量 + this.成员变量名 本类的成员变量 + super.成员变量名 父类的成员变量</li><li>访问成员方法 <ul><li>this.成员方法名（参数） 调用本类的成员方法</li><li>super.成员方法名(参数) 调用父类的成员方法</li></ul></li><li>调用构造方法 <ul><li>this(参数) 调用本类的构造方法</li><li>super(参数) 调用父类的构造方法</li></ul></li></ul><h1 id="面向对象-多态" tabindex="-1">面向对象-多态 <a class="header-anchor" href="#面向对象-多态" aria-hidden="true">#</a></h1><h2 id="_1-多态的概念" tabindex="-1">1.多态的概念 <a class="header-anchor" href="#_1-多态的概念" aria-hidden="true">#</a></h2><p>​ 同一个数据类型不同对象对同一种行为会有多种不同的实现。</p><h2 id="_2-多态的前提" tabindex="-1">2.多态的前提 <a class="header-anchor" href="#_2-多态的前提" aria-hidden="true">#</a></h2><p>​ ①子类重写了父类的方法</p><p>​ ②父类引用指向子类对象（创建的是一个子类对象，并把该对象赋值给一个变量，这个变量的类型是其父类类型）</p><p>例如：</p><div class="language-JAVA line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JAVA</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">        Animal a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Dog</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        a.</span><span style="color:#B392F0;">eat</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        Animal b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Cat</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        b.</span><span style="color:#B392F0;">eat</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_3-父类引用指向子类对象后成员访问的特点" tabindex="-1">3.父类引用指向子类对象后成员访问的特点 <a class="header-anchor" href="#_3-父类引用指向子类对象后成员访问的特点" aria-hidden="true">#</a></h2><p>​ 除了成员方法编译器看左边，运行看右边。其他所有成员都是编译器看左边，运行看左边。</p><p>​ 解读：编译期间回去看左边（父类），看父类有没有这个成员方法。如果没有则直接报错，如果有则编译通过，不报错。运行期间，实际执行代码，看的是右边（子类），看子类中有没有重写该方法，如果有则执行子类中的该方法，如果没有则运行父类中的该方法。</p><h2 id="_4-多态的应用场景" tabindex="-1">4.多态的应用场景 <a class="header-anchor" href="#_4-多态的应用场景" aria-hidden="true">#</a></h2><p>​ 多态最大的应用场景其实就是用在方法的参数上。在适当的时候把方法的参数类型定义成父类类型。调用方法的时候就可以传入任意的子类对象。提高了代码的复用性和可拓展性。</p><h2 id="_5-多态的优缺点" tabindex="-1">5.多态的优缺点 <a class="header-anchor" href="#_5-多态的优缺点" aria-hidden="true">#</a></h2><p>优点：提高了代码的复用性和可拓展性</p><p>缺点：不能直接使用子类的成员（编译时左边是父类，父类中没有子类特有的方法，所以会报错）</p><h2 id="_6-向上转型-向下转型" tabindex="-1">6.向上转型，向下转型 <a class="header-anchor" href="#_6-向上转型-向下转型" aria-hidden="true">#</a></h2><h3 id="_6-1向上转型" tabindex="-1">6.1向上转型 <a class="header-anchor" href="#_6-1向上转型" aria-hidden="true">#</a></h3><p>​ 向上转型就是子类转换成父类。这个是绝对安全的，所以会自动进行转换，我们直接写就可以了。</p><p>例如：父类引用指向子类对象</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">Animal a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Dog</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>狗一定是一个动物，所以是绝对安全的。</p><h3 id="_6-2向下转型" tabindex="-1">6.2向下转型 <a class="header-anchor" href="#_6-2向下转型" aria-hidden="true">#</a></h3><p>​ 向下转型就是父类转子类。因为不是绝对安全的所以必须使用强转的方式来进行转换。</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">Animal a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Dog</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">Dog d </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Dog)a;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>注意：必须是这个子类的对象才可以转换成该子类，否则会出异常。也就是说父类指向的子类必须和强制转换的是一个子类才行。</p><h3 id="_6-3-instanceof进行类型判断" tabindex="-1">6.3 instanceof进行类型判断 <a class="header-anchor" href="#_6-3-instanceof进行类型判断" aria-hidden="true">#</a></h3><p>​ 在向下转型的时候为了保证安全我们可以使用instanceof进行类型判断。判断一个对象是否是某个类的对象。如果是的话我们再把他转化成该类型，这样会更加安全。</p><h4 id="_6-3-1-使用格式" tabindex="-1">6.3.1 使用格式 <a class="header-anchor" href="#_6-3-1-使用格式" aria-hidden="true">#</a></h4><p>​ 对象 instanceof 类名/接口名</p><p>示例：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//调用feed方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        Cat cat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Cat</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">feed</span><span style="color:#E1E4E8;">(cat);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        Dog dog </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Dog</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">feed</span><span style="color:#E1E4E8;">(dog);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//如果是猫的话就调用特有的方法catchMouse</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(a </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;">  Cat){</span></span>
<span class="line"><span style="color:#E1E4E8;">            Cat c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Cat) a;</span></span>
<span class="line"><span style="color:#E1E4E8;">            c.</span><span style="color:#B392F0;">catchMouse</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(a </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> Dog){</span><span style="color:#6A737D;">//如果是狗的话就调用特有的方法watchDoor</span></span>
<span class="line"><span style="color:#E1E4E8;">            Dog d </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Dog) a;</span></span>
<span class="line"><span style="color:#E1E4E8;">            d.</span><span style="color:#B392F0;">watchDoor</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="_7-思考题" tabindex="-1">7.思考题 <a class="header-anchor" href="#_7-思考题" aria-hidden="true">#</a></h2><p>下面代码会输出什么</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DynamicTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        A a1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">A</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        A a2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">B</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        B b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">B</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        C c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">C</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        D d </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">D</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(a1.</span><span style="color:#B392F0;">show</span><span style="color:#E1E4E8;">(b));</span><span style="color:#6A737D;">//a a </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(a1.</span><span style="color:#B392F0;">show</span><span style="color:#E1E4E8;">(c));</span><span style="color:#6A737D;">//a a </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(a1.</span><span style="color:#B392F0;">show</span><span style="color:#E1E4E8;">(d));</span><span style="color:#6A737D;">//a d </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(a2.</span><span style="color:#B392F0;">show</span><span style="color:#E1E4E8;">(b));</span><span style="color:#6A737D;">//b a</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(a2.</span><span style="color:#B392F0;">show</span><span style="color:#E1E4E8;">(c));</span><span style="color:#6A737D;">//b a</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(a2.</span><span style="color:#B392F0;">show</span><span style="color:#E1E4E8;">(d));</span><span style="color:#6A737D;">//a d </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(b.</span><span style="color:#B392F0;">show</span><span style="color:#E1E4E8;">(b));</span><span style="color:#6A737D;">//b b</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(b.</span><span style="color:#B392F0;">show</span><span style="color:#E1E4E8;">(c));</span><span style="color:#6A737D;">//b b </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(b.</span><span style="color:#B392F0;">show</span><span style="color:#E1E4E8;">(d));</span><span style="color:#6A737D;">//a d </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">A</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">show</span><span style="color:#E1E4E8;">(D </span><span style="color:#FFAB70;">obj</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;A and D&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">show</span><span style="color:#E1E4E8;">(A </span><span style="color:#FFAB70;">obj</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;A and A&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">B</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">A</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">show</span><span style="color:#E1E4E8;">(B </span><span style="color:#FFAB70;">obj</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;B and B&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">show</span><span style="color:#E1E4E8;">(A </span><span style="color:#FFAB70;">obj</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;B and A&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">C</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">B</span><span style="color:#E1E4E8;">{}</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">D</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">B</span><span style="color:#E1E4E8;">{}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p>上面主要用到了多态的概念 继承性 父类引用指向子类对象 调用方法时的就近原则</p><h1 id="修饰符" tabindex="-1">修饰符 <a class="header-anchor" href="#修饰符" aria-hidden="true">#</a></h1><h2 id="_1-包和权限修饰符" tabindex="-1">1.包和权限修饰符 <a class="header-anchor" href="#_1-包和权限修饰符" aria-hidden="true">#</a></h2><h3 id="_1-1-包" tabindex="-1">1.1 包 <a class="header-anchor" href="#_1-1-包" aria-hidden="true">#</a></h3><p>​ 包其实就是文件夹，用来管理我们的类的。一个类的全名其实是包名加类名。</p><h4 id="_1-1-1-包的定义格式" tabindex="-1">1.1.1 包的定义格式 <a class="header-anchor" href="#_1-1-1-包的定义格式" aria-hidden="true">#</a></h4><p>​ 在类名的最上面加上package 包名；</p><p>例如</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.dunxi</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_1-1-2导包" tabindex="-1">1.1.2导包 <a class="header-anchor" href="#_1-1-2导包" aria-hidden="true">#</a></h4><p>​ 当我们在一个类中使用另外一个类的时候，如果这个类在另外一个包下。我们必须要写全类名或者导包（如果是在java.lang包下的类就不用）。</p><p>格式：import 全类名；</p><p>例如</p><div class="language-JAVA line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JAVA</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.Scanner;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">//使用星号通配符 将java.util下的所有包都导进来，后面就不用再去导包了，但是我们不推荐这样写，这样会吧我们用不到的很多包也导进来 效率会比较低</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_1-2权限修饰符" tabindex="-1">1.2权限修饰符 <a class="header-anchor" href="#_1-2权限修饰符" aria-hidden="true">#</a></h3><p>​ 我们使用权限修饰符来控制被修饰的成员的使用权限。Java中有四种权限修饰符：public、protected、default（default并不是关键字，而是代表不写权限修饰符，即默认）、private</p><h4 id="_1-2-1权限" tabindex="-1">1.2.1权限 <a class="header-anchor" href="#_1-2-1权限" aria-hidden="true">#</a></h4><p>​ 被不同的权限修饰符修饰后，被修饰的成员可以在不同范围内被使用。</p><table><thead><tr><th>权限，范围</th><th style="text-align:center;">本类中</th><th style="text-align:center;">同一个包下</th><th style="text-align:center;">子类</th><th style="text-align:center;">不同包非子类</th></tr></thead><tbody><tr><td>public</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr><tr><td>protected</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;"></td></tr><tr><td>默认</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td>private</td><td style="text-align:center;">√</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr></tbody></table><h4 id="_1-2-2-使用规律总结" tabindex="-1">1.2.2 使用规律总结 <a class="header-anchor" href="#_1-2-2-使用规律总结" aria-hidden="true">#</a></h4><p>​ 我们在工作中一般不使用默认权限，如果一个成员我们只想在本类中使用，我们就给他加上private，如果想要在本类中和继承给子类使用，我们就用protected，如果想被任意使用，我们就加public。</p><h2 id="_2-static" tabindex="-1">2.static <a class="header-anchor" href="#_2-static" aria-hidden="true">#</a></h2><p>​ static是一个修饰符，被其修饰的成员就属于类了。会被类的所有对象所共享。</p><p>可以用来修饰成员方法或者成员变量（只占用一个内存空间）</p><h3 id="_2-1-静态成员的调用格式" tabindex="-1">2.1 静态成员的调用格式 <a class="header-anchor" href="#_2-1-静态成员的调用格式" aria-hidden="true">#</a></h3><p>​ 无论是成员变量还是成员方法。用static修饰后我们既可以用对象名来调用也可以用类名来调用。一般都是用类名称进行调用。</p><p>使用类名调用的时候可以不用创建对象</p><p>​ 静态变量：<strong>类名.静态变量名</strong></p><p>​ 静态方法：<strong>类名.静态方法名(参数)</strong></p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Student</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> age;</span></span>
<span class="line"><span style="color:#E1E4E8;">    String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//加了static之后他就变成了共享的一个值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> String teacherName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;敦禧&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">study</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;学习&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}    </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#6A737D;">//        Student stu = new Student();</span></span>
<span class="line"><span style="color:#6A737D;">//        Student stu2 = new Student();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//        stu.teacherName = &quot;四更&quot;;</span></span>
<span class="line"><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#6A737D;">//        System.out.println(stu.teacherName);</span></span>
<span class="line"><span style="color:#6A737D;">//        System.out.println(stu2.teacherName);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//使用类名调用的时候可以不用创建对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        Student.teacherName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;zangdunxi&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(Student.teacherName);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        Student.</span><span style="color:#B392F0;">study</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h4 id="内存图" tabindex="-1">内存图： <a class="header-anchor" href="#内存图" aria-hidden="true">#</a></h4><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="内存图"></p><h3 id="_2-2注意事项" tabindex="-1">2.2注意事项 <a class="header-anchor" href="#_2-2注意事项" aria-hidden="true">#</a></h3><pre><code>1. 静态方法中不能直接使用非静态的成员
2. 静态方法中不能使用this
</code></pre><h3 id="_2-3-理解" tabindex="-1">2.3 理解 <a class="header-anchor" href="#_2-3-理解" aria-hidden="true">#</a></h3><p>​ 因为被static修饰的东西就属于类了，所以可以直接使用类名来调用 ​ 因为被static修饰的东西就属于类了，类的加载是优先于对象的，所以在静态方法中不能使用非静态的成员（非静态的成员属于对象，对象是类创建出来的东西），类出现的时候对象还没有创建，所以不能使用还不存在的东西 ​ 因为被static修饰的东西就属于类了，而this代表某个对象，类加载的时候对象还没有创建，所以在静态方法中不能使用this，因为对象还没有出现呢。</p><p>​</p><h3 id="_2-4使用场景" tabindex="-1">2.4使用场景 <a class="header-anchor" href="#_2-4使用场景" aria-hidden="true">#</a></h3><p>①如果需要共享数据，可以使用static ②<strong>如果想要方便调用某些成员，可以使用static修饰</strong>（PS：因为就可以直接使用类名来调用，不需要创建对象）</p><h2 id="_3-final" tabindex="-1">3.final <a class="header-anchor" href="#_3-final" aria-hidden="true">#</a></h2><p>​ final可以修饰类，成员方法，局部变量，成员变量。</p><p>​ 修饰后的作用如下：</p><p>​ ①可以修饰类，被final修饰的类不能被继承。 ​ ②可以修饰成员方法，被final修饰的成员方法不能被重写 ​ ③可以修饰局部变量，被final修饰的局部变量就变成了常量，赋值之后不能被修改 ​ ④可以修饰成员变量，被final修饰的成员变量就变成了常量，一旦赋值之后就不能被修改。并且必须初始化。有两种初始化方式，一种是直接赋值，另外一种是要在类的所有构造方法中对其进行赋值。</p><h1 id="面向对象-抽象类" tabindex="-1">面向对象-抽象类 <a class="header-anchor" href="#面向对象-抽象类" aria-hidden="true">#</a></h1><h2 id="_1-为什么要抽象" tabindex="-1">1.为什么要抽象 <a class="header-anchor" href="#_1-为什么要抽象" aria-hidden="true">#</a></h2><p>​ 当一个类中有一个方法，这个方法在不同的子类中有不同的实现的时候，在父类中我们没有办法去写具体的方法体，这个时候就可以使用抽象。（即不写方法体）</p><h2 id="_2-抽象类和抽象方法的格式" tabindex="-1">2.抽象类和抽象方法的格式 <a class="header-anchor" href="#_2-抽象类和抽象方法的格式" aria-hidden="true">#</a></h2><h3 id="_2-1抽象方法" tabindex="-1">2.1抽象方法 <a class="header-anchor" href="#_2-1抽象方法" aria-hidden="true">#</a></h3><p>​ 在成员方法的返回值类型前加abstract修饰，然后去掉方法的大括号，加上一个分号。</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">eat</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-2-抽象类" tabindex="-1">2.2 抽象类 <a class="header-anchor" href="#_2-2-抽象类" aria-hidden="true">#</a></h3><p>​ 在class关键字前面加上abstract修饰。</p><p>例如</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Animal</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> age;</span></span>
<span class="line"><span style="color:#E1E4E8;">    String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">eat</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_3-抽象类的特点" tabindex="-1">3.抽象类的特点 <a class="header-anchor" href="#_3-抽象类的特点" aria-hidden="true">#</a></h2><ul><li>抽象类可以有抽象方法，还有就是不能直接创建对象（因为抽象类中的抽象方法不可被调用 ），其他所有都和普通类一样</li><li>抽象类的子类，要么重写父类中的所有抽象方法，要么子类也是一个抽象类</li><li>防止同事写代码时忘记重写方法。</li></ul><h1 id="面向对象-接口" tabindex="-1">面向对象-接口 <a class="header-anchor" href="#面向对象-接口" aria-hidden="true">#</a></h1><h2 id="_1-接口的概念" tabindex="-1">1.接口的概念 <a class="header-anchor" href="#_1-接口的概念" aria-hidden="true">#</a></h2><p>​ 接口就是规范/规则，我们可以使用接口来定义一些规则（比如要求某个方法的方法名必须叫什么，方法的参数列表必须是什么，方法的返回值类型必须是什么）</p><p>​ 现实生活中的规范</p><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/image-20221121154830076.png" alt="image-20221121154830076"></p><h2 id="_2-接口的格式" tabindex="-1">2.接口的格式 <a class="header-anchor" href="#_2-接口的格式" aria-hidden="true">#</a></h2><h3 id="_2-1定义格式" tabindex="-1">2.1定义格式 <a class="header-anchor" href="#_2-1定义格式" aria-hidden="true">#</a></h3><p>使用<strong>interface</strong>来定义接口</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">接口名</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//定义抽象方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">method</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//前面不需要加public 和 abstract 这两个会被默认加上</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_2-2-实现接口" tabindex="-1">2.2 实现接口 <a class="header-anchor" href="#_2-2-实现接口" aria-hidden="true">#</a></h3>`,184),f=e(`<div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#6A737D;">//				类名						接口名</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InterfaceImpl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InterfaceA</span><span style="color:#E1E4E8;">,</span><span style="color:#B392F0;">InterfaceB</span><span style="color:#E1E4E8;">,...{		@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">method</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;method这个方法被调用了&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="_3-接口中的成员" tabindex="-1">3.接口中的成员 <a class="header-anchor" href="#_3-接口中的成员" aria-hidden="true">#</a></h2><h3 id="_3-1-常用成员" tabindex="-1">3.1 常用成员 <a class="header-anchor" href="#_3-1-常用成员" aria-hidden="true">#</a></h3><p>​ 在jdk7版本中接口中只能有常量和抽象方法。</p><p>​ 我们接口中定义不了变量。因为定义的成员变量默认都会修饰为：public static final</p><p>​ 我们在接口中定义的方法默认修饰符为public abstract</p><p>例子</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InterfaceA</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//常量</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">//等价于public static final int num = 10；</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//抽象方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">method</span><span style="color:#E1E4E8;">();</span><span style="color:#6A737D;">//等价于public abstract void method();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_3-2-新增成员" tabindex="-1">3.2 新增成员 <a class="header-anchor" href="#_3-2-新增成员" aria-hidden="true">#</a></h3><p>​ 在新版本的jdk中接口中允许出现更多的成员。</p><h4 id="_3-2-1-默认方法" tabindex="-1">3.2.1 默认方法 <a class="header-anchor" href="#_3-2-1-默认方法" aria-hidden="true">#</a></h4><p>​ 在jdk8中允许我们在接口中定义默认方法。默认方法允许有方法体。</p><p>​ 默认方法可以<strong>选择</strong>不进行重写。</p><h5 id="_3-2-1-1-格式" tabindex="-1">3.2.1.1 格式 <a class="header-anchor" href="#_3-2-1-1-格式" aria-hidden="true">#</a></h5><p>​ 使用default关键字进行修饰。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InterfaceA</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//默认方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">method</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="_3-2-1-2-注意事项" tabindex="-1">3.2.1.2 注意事项 <a class="header-anchor" href="#_3-2-1-2-注意事项" aria-hidden="true">#</a></h5><p>​ 如果两个接口中有相同的默认方法。一个类同时实现了这两个接口，必须要重写该方法。</p><h5 id="_3-3-1-3-应用场景" tabindex="-1">3.3.1.3 应用场景 <a class="header-anchor" href="#_3-3-1-3-应用场景" aria-hidden="true">#</a></h5><p>​ 如果在接口升级的时候某些方法并不想让所有的实现类进行重写，可以使用默认方法来定义。</p><h4 id="_3-2-2-静态方法" tabindex="-1">3.2.2 静态方法 <a class="header-anchor" href="#_3-2-2-静态方法" aria-hidden="true">#</a></h4><p>​ 在jdk8中允许我们在接口中定义静态方法。静态方法允许有方法体。</p><p>​ 静态方法不能被重写。</p><h5 id="_3-2-2-1-格式" tabindex="-1">3.2.2.1 格式 <a class="header-anchor" href="#_3-2-2-1-格式" aria-hidden="true">#</a></h5><p>​ 使用static关键字进行修饰</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InterfaceA</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//静态方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">staticMethod</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Demo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//使用接口名.方法名（参数）来调用</span></span>
<span class="line"><span style="color:#E1E4E8;">        InterfaceA.</span><span style="color:#B392F0;">staticMethod</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h5 id="_3-2-2-2-应用场景" tabindex="-1">3.2.2.2 应用场景 <a class="header-anchor" href="#_3-2-2-2-应用场景" aria-hidden="true">#</a></h5><p>​ 如果在接口升级的时候需要给接口增加一些工具方法。不想让实现类去重写该方法，可以使用静态方法来定义。</p><h4 id="_3-2-3-私有方法" tabindex="-1">3.2.3 私有方法 <a class="header-anchor" href="#_3-2-3-私有方法" aria-hidden="true">#</a></h4><p>​ 在jdk9中允许我们在接口中定义私有方法。私有方法允许有方法体。</p><p>​ 私有方法不可以被重写。</p><h5 id="_3-2-3-1-格式" tabindex="-1">3.2.3.1 格式 <a class="header-anchor" href="#_3-2-3-1-格式" aria-hidden="true">#</a></h5><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InterfaceA</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">method1</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#6A737D;">//        for (int i = 0; i &lt; 10; i++) {</span></span>
<span class="line"><span style="color:#6A737D;">//            System.out.println(i);</span></span>
<span class="line"><span style="color:#6A737D;">//        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">privateMethod</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;method1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">method2</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#6A737D;">//        for (int i = 0; i &lt; 10; i++) {</span></span>
<span class="line"><span style="color:#6A737D;">//            System.out.println(i);</span></span>
<span class="line"><span style="color:#6A737D;">//        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">staticMethod</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;method2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//默认方法抽取出来的重复代码</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">privateMethod</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//静态方法抽取出来的重复代码</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">staticMethod</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h5 id="_3-2-3-2-应用场景" tabindex="-1">3.2.3.2 应用场景 <a class="header-anchor" href="#_3-2-3-2-应用场景" aria-hidden="true">#</a></h5><p>​ 对魔忍方法或者是静态方法中重复的代码进行抽取，提高代码复用度。</p><h2 id="_4-继承实现关系" tabindex="-1">4.继承实现关系 <a class="header-anchor" href="#_4-继承实现关系" aria-hidden="true">#</a></h2><p>​ 在java中一个类可以实现多个接口</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Preson</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InterfaceA</span><span style="color:#E1E4E8;">,</span><span style="color:#B392F0;">InterfaceB</span><span style="color:#E1E4E8;">{}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>​ 在Java中接口和接口之间可以有继承关系。继承之后会把父接口的成员继承下来。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InterfaceC</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InterfaceA</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">//    void method1();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_5-抽象类和接口的使用区别" tabindex="-1">5.抽象类和接口的使用区别 <a class="header-anchor" href="#_5-抽象类和接口的使用区别" aria-hidden="true">#</a></h2><p>接口中的基本都是抽象的，而在抽象类中可以有一部分是非抽象方法。而非抽象类中是不可以有抽象方法的。</p><p>​ 我们就发现接口是最抽象的，其次是抽象类，最后是非抽象类。 ​ 所以我们最顶层设计成接口，然后实现类设计成抽象类（实现部分抽象方法），抽象类的子类可以设计成非抽象类（对剩下的所有抽象方法进行实现）。</p><h1 id="面向对象-代码块" tabindex="-1">面向对象-代码块 <a class="header-anchor" href="#面向对象-代码块" aria-hidden="true">#</a></h1><h2 id="_1-局部代码块" tabindex="-1">1.局部代码块 <a class="header-anchor" href="#_1-局部代码块" aria-hidden="true">#</a></h2><h3 id="_1-1格式" tabindex="-1">1.1格式 <a class="header-anchor" href="#_1-1格式" aria-hidden="true">#</a></h3><p>​ 在方法中直接写一对大括号即可</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Demo</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//下面是一个局部代码块</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_1-2应用场景" tabindex="-1">1.2应用场景 <a class="header-anchor" href="#_1-2应用场景" aria-hidden="true">#</a></h3><p>​ 如果需要控制局部变量的生命周期，想让其使用完后尽快销毁，可以把局部变量定义在局部代码块。</p><h2 id="_2-构造代码块" tabindex="-1">2.构造代码块 <a class="header-anchor" href="#_2-构造代码块" aria-hidden="true">#</a></h2><h3 id="_2-1-格式" tabindex="-1">2.1 格式 <a class="header-anchor" href="#_2-1-格式" aria-hidden="true">#</a></h3><p>​ 在勒种方法外直接写一堆大括号即可</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Student</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> age;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//下面是一个构造代码块</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>​</p><h3 id="_2-2-调用时机" tabindex="-1">2.2 调用时机 <a class="header-anchor" href="#_2-2-调用时机" aria-hidden="true">#</a></h3><p>​ 构造代码块会在调用构造方法的时候执行，并且会在构造方法中的代码执行前执行。</p><h3 id="_2-3-应用场景" tabindex="-1">2.3 应用场景 <a class="header-anchor" href="#_2-3-应用场景" aria-hidden="true">#</a></h3><p>​ 用来抽取构造方法中重复的代码，提高代码复用性。</p><h2 id="_3-静态代码块" tabindex="-1">3.静态代码块 <a class="header-anchor" href="#_3-静态代码块" aria-hidden="true">#</a></h2><h3 id="_3-1-格式" tabindex="-1">3.1 格式 <a class="header-anchor" href="#_3-1-格式" aria-hidden="true">#</a></h3><p>​ 在类中方法外部直接写一对大括号即可，在括号前用static修饰</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Student</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> age;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//下面是静态代码块,用于初始化类中的静态成员</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">        age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_3-2-调用时机" tabindex="-1">3.2 调用时机 <a class="header-anchor" href="#_3-2-调用时机" aria-hidden="true">#</a></h3><p>​ 在类加载的时候会执行，同一个类在程序运行过程中只会被加载一次，所以只会执行一次</p><h3 id="_3-3-应用场景" tabindex="-1">3.3 应用场景 <a class="header-anchor" href="#_3-3-应用场景" aria-hidden="true">#</a></h3><p>​ 用来给类当中的静态成员进行初始化。</p><h1 id="面向对象-内部类" tabindex="-1">面向对象-内部类 <a class="header-anchor" href="#面向对象-内部类" aria-hidden="true">#</a></h1><h2 id="_1-局部内部类" tabindex="-1">1.局部内部类 <a class="header-anchor" href="#_1-局部内部类" aria-hidden="true">#</a></h2><h3 id="_1-1-格式" tabindex="-1">1.1 格式 <a class="header-anchor" href="#_1-1-格式" aria-hidden="true">#</a></h3><h4 id="_1-1-1定义格式" tabindex="-1">1.1.1定义格式 <a class="header-anchor" href="#_1-1-1定义格式" aria-hidden="true">#</a></h4><p>​ 把类定义在方法中即可</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Outer</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Inner</span><span style="color:#E1E4E8;">{</span><span style="color:#6A737D;">//定义了一个局部内部类</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">pringln</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;局部内部类&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="_1-1-2-对象创建格式" tabindex="-1">1.1.2 对象创建格式 <a class="header-anchor" href="#_1-1-2-对象创建格式" aria-hidden="true">#</a></h4><p>​ 直接在定义局部内部类的方法中按照之前创建对象的格式进行创建即可。如果在该方法外就不能使用局部内部类了。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">outer</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Inner</span><span style="color:#E1E4E8;">{</span><span style="color:#6A737D;">//定义了一个局部内部类</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.print1n（</span><span style="color:#9ECBFF;">&quot;局部内部类&quot;</span><span style="color:#E1E4E8;">）；</span></span>
<span class="line"><span style="color:#E1E4E8;">Inner inner </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Inner〇;</span></span>
<span class="line"><span style="color:#E1E4E8;">inner.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_1-2-应用场景" tabindex="-1">1.2 应用场景 <a class="header-anchor" href="#_1-2-应用场景" aria-hidden="true">#</a></h3><p>​ 如果需要定义一个在方法中临时使用的类时可以使用局部内部类。不过该内部类基本不会使用到。</p><h3 id="_1-3-注意事项" tabindex="-1">1.3 注意事项 <a class="header-anchor" href="#_1-3-注意事项" aria-hidden="true">#</a></h3><p>​ 内部类可以使用外部的局部变量。但是要求这些局部变量必须是<strong>事实常量</strong>。即赋值之后不会再改变值的变量。</p><h2 id="_2-成员内部类" tabindex="-1">2.成员内部类 <a class="header-anchor" href="#_2-成员内部类" aria-hidden="true">#</a></h2><h3 id="_2-1-格式-1" tabindex="-1">2.1 格式 <a class="header-anchor" href="#_2-1-格式-1" aria-hidden="true">#</a></h3><h4 id="_2-1-1-定义格式" tabindex="-1">2.1.1 定义格式 <a class="header-anchor" href="#_2-1-1-定义格式" aria-hidden="true">#</a></h4><p>​ 把类定义在类中即可</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Outer</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Inner</span><span style="color:#E1E4E8;">{</span><span style="color:#6A737D;">//定义了一个成员内部类</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;成员内部类&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_2-1-2-对象创建格式" tabindex="-1">2.1.2 对象创建格式 <a class="header-anchor" href="#_2-1-2-对象创建格式" aria-hidden="true">#</a></h4><p>​ 在定义内部类的类中创建对象即可。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Outer</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Inner inner </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Inner</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Inner</span><span style="color:#E1E4E8;">{</span><span style="color:#6A737D;">//定义了一个成员内部类</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;成员内部类&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#6A737D;">//内部类</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Itr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Iterator</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">index;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> arr[index];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hsaNext</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (index</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">size;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="_2-2-特点" tabindex="-1">2.2 特点 <a class="header-anchor" href="#_2-2-特点" aria-hidden="true">#</a></h3><p>​ ①在成员内部类中可以直接使用外部类的成员，即使这个成员是私有的。</p><p>​ ②如果外部类的成员和内部类的成员重名了，可以使用外部类名.this.成员名来进行修饰，表示外部类的成员</p><p>​ ③成员内部类中不能定义静态的成员。（非静态中不能使用静态）</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyArray</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//存放集合数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> arr[];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//    集合大小</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> size;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Iterator </span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        Itr itr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Itr</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> itr;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//内部类</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Itr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Iterator</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">index;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> arr[index];</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hsaNext</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (index</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">size;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyArray</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ... </span><span style="color:#FFAB70;">arr</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arr;</span></span>
<span class="line"><span style="color:#E1E4E8;">        size </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arr.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        Arrays.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(arr);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h3 id="_2-3-应用场景-1" tabindex="-1">2.3 应用场景 <a class="header-anchor" href="#_2-3-应用场景-1" aria-hidden="true">#</a></h3><p>​ 一个类不会单独使用，需要和另外类（外部类）一起使用才有意义。并且会用到外部类中的私有成员的时候可以把该类定义为一个内部类。例如ArrayList中的Itr</p><h2 id="_3-静态内部类" tabindex="-1">3.静态内部类 <a class="header-anchor" href="#_3-静态内部类" aria-hidden="true">#</a></h2><h3 id="_3-1-格式-1" tabindex="-1">3.1 格式 <a class="header-anchor" href="#_3-1-格式-1" aria-hidden="true">#</a></h3><h4 id="_3-1-1-定义格式" tabindex="-1">3.1.1 定义格式 <a class="header-anchor" href="#_3-1-1-定义格式" aria-hidden="true">#</a></h4><p>​ 把类定义在类中方法外，然后使用static关键字修饰即可。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Outer</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Inner</span><span style="color:#E1E4E8;">{</span><span style="color:#6A737D;">//定义了一个静态内部类</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;静态内部类&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_3-2-特点" tabindex="-1">3.2 特点 <a class="header-anchor" href="#_3-2-特点" aria-hidden="true">#</a></h3><p>​ 在静态内部类中可以直接使用外类静态，即使是私有的。</p><h3 id="_3-2-应用场景" tabindex="-1">3.2 应用场景 <a class="header-anchor" href="#_3-2-应用场景" aria-hidden="true">#</a></h3><p>​ 一个类不会单独使用，需要和另外类（外部类）一起使用才有意义。需要在内部类中定义静态成员的时候，可以把成员内部类使用static修饰编程静态内部类。例如Integer中的IntegerCache</p><h2 id="_4-匿名内部类" tabindex="-1">4.匿名内部类 <a class="header-anchor" href="#_4-匿名内部类" aria-hidden="true">#</a></h2><p>​ 匿名内部类本质是一个对象，它是某个类（接口）的子类（实现类）对象。</p><h3 id="_4-1-格式" tabindex="-1">4.1 格式 <a class="header-anchor" href="#_4-1-格式" aria-hidden="true">#</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> 接口名</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">类名（）{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//重写要重写的方法</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Runner</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Demo</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Runner r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Runner</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;匿名内部类重写了run方法&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"><span style="color:#E1E4E8;">        r.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_4-2-应用场景" tabindex="-1">4.2 应用场景 <a class="header-anchor" href="#_4-2-应用场景" aria-hidden="true">#</a></h3><p>​ 如果需要创建一个类或者接口的子类对象。但是这个子类只会使用一次，就没必要创建单独的一个类。就可以使用匿名内部类的形式实现效果。</p><h1 id="常见类" tabindex="-1">常见类 <a class="header-anchor" href="#常见类" aria-hidden="true">#</a></h1><h2 id="_1-object-祖宗类" tabindex="-1">1.Object(祖宗类) <a class="header-anchor" href="#_1-object-祖宗类" aria-hidden="true">#</a></h2><h2 id="api文档" tabindex="-1">API文档 <a class="header-anchor" href="#api文档" aria-hidden="true">#</a></h2><p><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html" target="_blank" rel="noreferrer">https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html</a></p><h3 id="_1-1概述" tabindex="-1">1.1概述 <a class="header-anchor" href="#_1-1概述" aria-hidden="true">#</a></h3><p>​ 在JDK的java.lang包下定义了Object这个类。</p><p>​ java中所有的类都直接或间接的继承Object。所以人以类的对象都可以使用Object中定义的方法。不过内部的实现可能在不同的子类中有不同的重写。</p><p>​ 我们可以直接使用空参构造创建Object的对象，但是一般我们不会直接创建Object对象，更多的是使用多态的写法。</p><h3 id="_1-2-常用方法" tabindex="-1">1.2 常用方法 <a class="header-anchor" href="#_1-2-常用方法" aria-hidden="true">#</a></h3><h4 id="_1-2-1-tostring方法" tabindex="-1">1.2.1 toString方法 <a class="header-anchor" href="#_1-2-1-tostring方法" aria-hidden="true">#</a></h4><p>​ 取得对象信息，返回该对象的字符串表示。Object的toString方法返回值的是类全类名和对象hash值的拼接。</p><p>​ 内部实现如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;"> (){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;@&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">Integer.</span><span style="color:#B392F0;">toHexString</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">hashCode</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>​ 正常情况下Object的toString的返回值对我们是没有意义的。所以若果有需要的话我们都会在自己的类中重写toString方法。</p><p>1.2.2 equals方法</p><p>​ 比较两个对象是否相同。</p><p>​ 内部实现如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(Object obj) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> obj);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>​ 很多情况下判断两个对象是否相同的时候不能单纯的使用==去判断。这种情况下就可以重写equals方法。实现自己的判断逻辑。</p><h2 id="_2-string" tabindex="-1">2.String <a class="header-anchor" href="#_2-string" aria-hidden="true">#</a></h2><h3 id="_2-1-概述" tabindex="-1">2.1 概述 <a class="header-anchor" href="#_2-1-概述" aria-hidden="true">#</a></h3><p>​ Java提供的用于描述字符串的类。在JDK中的java.lang包下定义了String这个类。在该类中定义了很多我们常用的成员方法，用于对字符串进行常用操作。</p><h3 id="_2-2-对象创建" tabindex="-1">2.2 对象创建 <a class="header-anchor" href="#_2-2-对象创建" aria-hidden="true">#</a></h3><h4 id="_2-2-1-直接使用字面值" tabindex="-1">2.2.1 直接使用字面值 <a class="header-anchor" href="#_2-2-1-直接使用字面值" aria-hidden="true">#</a></h4><p>​ 可以直接使用String类型的变量直接给其赋值一个字符串字面值</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">String name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;敦禧&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_2-2-2-使用构造方法" tabindex="-1">2.2.2 使用构造方法 <a class="header-anchor" href="#_2-2-2-使用构造方法" aria-hidden="true">#</a></h4><p>​ 可以使用String中定义的构造方法来创建对象。String有10多个构造方法。我们就针对其中比较常用的几个进行演示。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] bytes)</span></span>
<span class="line"><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] bytes, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> offset, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> length)</span></span>
<span class="line"><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;">[] value)</span></span>
<span class="line"><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;">[] value, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> offset, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> count)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>演示如下：</p><div class="language-JAVA line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JAVA</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#6A737D;">//        String s = &quot;敦禧&quot;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//        String()  空参构造</span></span>
<span class="line"><span style="color:#E1E4E8;">        String s2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//        String(byte[] bytes)  ASCII</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] bytes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#79B8FF;">97</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">98</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">99</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">        String s3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(bytes);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s3);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//        String(byte[] bytes, int offset, int length)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        String s4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(bytes,</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s4);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//        String(char[] value)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;">[] chars </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;c&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;d&#39;</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">        String s5 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(chars);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s5);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//        String(char[] value, int offset, int count)</span></span>
<span class="line"><span style="color:#E1E4E8;">        String s6 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(chars,</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s6);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="_2-3-常用方法" tabindex="-1">2.3 常用方法 <a class="header-anchor" href="#_2-3-常用方法" aria-hidden="true">#</a></h3><blockquote><p>String[] split(String regex) 把一个字符串按照指定的分隔符切割成多个字符串，把多个字符串放在一个字符串数组中返回</p><p>char[] toCharArray(); 把一个字符串内容转换成一个字符数组</p><p>byte[] getBytes(); 把一个字符串内容转换成byte数组</p><p>String substring(int index) 把某个字符串从index索引开始截取到最后</p><p>String substring(int begin,ing end) 把某个字符串索引begin到索引end截取出来</p><p>boolean equals(Object anObject) 判断两个字符串的内容是否相同</p></blockquote><p>split:</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">String s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;敦禧，男，151&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] strs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;，&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> strs.length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(strs[i]);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>char[] toCharArray(); 把一个字符串内容转换成一个字符数组</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">String s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;abcd&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">char</span><span style="color:#E1E4E8;">[] chars </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">toCharArray</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(chars);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>byte[] getBytes(); 把一个字符串内容转换成byte数组</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] bytes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;asdfasdf&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>String substring(int index) 把某个字符串从index索引开始截取到最后</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">String s2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;abcd&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s2);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>String substring(int begin,ing end) 把某个字符串索引begin到索引end截取出来</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">        String s3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;asdfasdlf&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s3);</span><span style="color:#6A737D;">//包左不包右</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>boolean equals(Object anObject) 判断两个字符串的内容是否相同</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#6A737D;">//boolean  equals(Object anObject)  判断两个字符串的内容是否相同</span></span>
<span class="line"><span style="color:#E1E4E8;">        String s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;abc&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        String s2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;abcd&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(s2));</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_2-4-特点" tabindex="-1">2.4 特点 <a class="header-anchor" href="#_2-4-特点" aria-hidden="true">#</a></h3><ol><li>一个字符串一旦创建其内容是永远不会改变的</li><li>字符串出效果相当于是char[]字符数组，但是底层其实是byte[] 字节数组</li></ol><h2 id="_3-包装类" tabindex="-1">3.包装类 <a class="header-anchor" href="#_3-包装类" aria-hidden="true">#</a></h2><h3 id="_3-1概述" tabindex="-1">3.1概述 <a class="header-anchor" href="#_3-1概述" aria-hidden="true">#</a></h3><p>​ Java为每一个基本数据类型提供了对应的一个包装类。包装类是一个类，这样Java就可以在包装类中提供常用的方法供我们使用。</p><p>​ 基本数据类型和对应包装类的对应关系为：</p><table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr></tbody></table><p>​ 包装类的功能基本类似，下面就以Integer为例子演示。</p><h3 id="_3-2-创建对象" tabindex="-1">3.2 创建对象 <a class="header-anchor" href="#_3-2-创建对象" aria-hidden="true">#</a></h3><h4 id="_3-2-1-直接使用字面值" tabindex="-1">3.2.1 直接使用字面值 <a class="header-anchor" href="#_3-2-1-直接使用字面值" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Integer i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_3-2-2-使用构造方法" tabindex="-1">3.2.2 使用构造方法 <a class="header-anchor" href="#_3-2-2-使用构造方法" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#6A737D;">//        Integer i = 10;</span></span>
<span class="line"><span style="color:#E1E4E8;">        Integer i2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Integer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Integer i3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Integer</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;10&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_3-2-3-使用静态方法valueof" tabindex="-1">3.2.3 使用静态方法valueOf <a class="header-anchor" href="#_3-2-3-使用静态方法valueof" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">Integer val </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Integer.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">Integer val1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Integer.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;11&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_3-3-常用方法" tabindex="-1">3.3 常用方法 <a class="header-anchor" href="#_3-3-常用方法" aria-hidden="true">#</a></h3><blockquote><p>static Integer valueOf(int i) 把int转换成Integer对象返回</p><p>static Integer valueOf(String s) 把字符串转换成Integer对象返回 要求字符串的内容必须为纯数字</p><p>static int parseInt(string s) 把字符串转换成int返回 要求字符串的内容必须为纯数字</p></blockquote><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">        Integer val </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Integer.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Integer val1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Integer.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;11&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Integer.</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;123&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(val);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(val1);</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_3-4-自动装箱与自动拆箱" tabindex="-1">3.4 自动装箱与自动拆箱 <a class="header-anchor" href="#_3-4-自动装箱与自动拆箱" aria-hidden="true">#</a></h3><h4 id="_3-4-1-概述" tabindex="-1">3.4.1 概述 <a class="header-anchor" href="#_3-4-1-概述" aria-hidden="true">#</a></h4><p>​ 在JDK1.5中就增加了自动装箱和自动拆箱。主要是让基本数据类型和对应的包装类进行<strong>自动转换</strong>，方便我们的使用。</p><h4 id="_3-4-2-自动装箱" tabindex="-1">3.4.2 自动装箱 <a class="header-anchor" href="#_3-4-2-自动装箱" aria-hidden="true">#</a></h4><p>​ 自动装箱就是基本数据类型可以<strong>自动</strong>转换成对应的包装类。例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">Integer i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">Integer i2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> num;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_3-4-3-自动拆箱" tabindex="-1">3.4.3 自动拆箱 <a class="header-anchor" href="#_3-4-3-自动拆箱" aria-hidden="true">#</a></h4><p>​ 自动拆箱就是包装类可以<strong>自动</strong>转换成基本数据类型。例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">Integer i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Integer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_3-4-4-原理" tabindex="-1">3.4.4 原理 <a class="header-anchor" href="#_3-4-4-原理" aria-hidden="true">#</a></h4><p>​ 自动装箱其实是通过包装类的静态方法valueOf来实现转换的。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Integer i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Integer i2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    Integer i3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">300</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Integer i4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">300</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(i </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> i2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(i3 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> i4);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//为什么这个返回的是false呢？</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//因为自动装箱过程中使用了valueOf方法，他提供了一个地址池，当需要转换的内容在地址池范围内的时候，直接从</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//地址池里面拿数据，所以在-128到127之间的时候，返回的地址值是一样的，而==比较的正是地址值，所以i和i2相等</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//但是300不在这个范围内，所以valueOf  new了两个对象，这时候==比较的地址值不一样 所以返回false</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="_4-stringbuilder" tabindex="-1">4.StringBuilder <a class="header-anchor" href="#_4-stringbuilder" aria-hidden="true">#</a></h2><h3 id="_4-1-概述" tabindex="-1">4.1 概述 <a class="header-anchor" href="#_4-1-概述" aria-hidden="true">#</a></h3><p>​ StringBuilder是专门用来进行字符串拼接的。我们可以使用他来进行拼接字符串。</p><h3 id="_4-2-创建对象" tabindex="-1">4.2 创建对象 <a class="header-anchor" href="#_4-2-创建对象" aria-hidden="true">#</a></h3><p>​ 可以使用构造方法来创建对象。例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	StringBuilder sb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringBuilder</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;三更草堂&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	StringBuilder sb1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringBuilder</span><span style="color:#E1E4E8;">();</span><span style="color:#6A737D;">//创建出来的对象内容相当于空字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_4-3-常用方法" tabindex="-1">4.3 常用方法 <a class="header-anchor" href="#_4-3-常用方法" aria-hidden="true">#</a></h3><blockquote><p>append方法 用于拼接内容</p><p>reverse方法 可以翻转内容</p><p>toString方法 把StringBuilder转换为String类型</p></blockquote><p>append方法演示：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">StringBuilder sb2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringBuilder</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(sb2);</span></span>
<span class="line"><span style="color:#E1E4E8;">sb2.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">sb2.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">sb2.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>reverse方法演示：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">sb2.</span><span style="color:#B392F0;">reverse</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(sb2);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>toString方法演示：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">String s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sb2.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h1 id="异常体系" tabindex="-1">异常体系 <a class="header-anchor" href="#异常体系" aria-hidden="true">#</a></h1><h2 id="_1-异常继承体系" tabindex="-1">1.异常继承体系 <a class="header-anchor" href="#_1-异常继承体系" aria-hidden="true">#</a></h2><p>​ Java中异常体系的核心类是Throwable，他有两个子类Error和Exception。</p><p>​ Error代表一些非常严重的错误。我们一般不必特意在代码中处理他们。</p><p>​ Exception相当于一些小错误。可以用来提示我们出现了什么问题。我们后面主要讲的就是Exception。</p><p>​ 异常主要分为两种：</p><p>​ 运行时异常（编译期间不会去做检查，不需要在代码中做预处理）</p><p>​ 运行时异常都是RuntimeException的子类，例如：NullPointerException，ArrayIndexOutOfBoundsException</p><p>​ 编译时异常（编译时就会做检查，如果一段代码中可能出现编译时异常必须在代码中做预处理）</p><p>​ 编译时异常是指非继承自RuntimeException的Exception的子类，例如：FileNotFoundException</p><h2 id="_2-异常处理" tabindex="-1">2.异常处理 <a class="header-anchor" href="#_2-异常处理" aria-hidden="true">#</a></h2><h3 id="_2-1throws声明抛出异常" tabindex="-1">2.1throws声明抛出异常 <a class="header-anchor" href="#_2-1throws声明抛出异常" aria-hidden="true">#</a></h3><p>​ 有些时候我们需要把异常抛出，在适当的地方去处理异常。这个时候就可以使用throws抛出异常，把异常交给方法的调用者处理。</p><p>格式：</p><p>​ 在方法声明处加上 throws异常类型.如果有多个异常用逗号分隔</p><p>示例：</p><p>抛出一个异常</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">() throws FileNotFoundException {</span></span>
<span class="line"><span style="color:#6A737D;">//        String s = null;</span></span>
<span class="line"><span style="color:#6A737D;">//        System.out.println(s.length());</span></span>
<span class="line"><span style="color:#E1E4E8;">        FileInputStream fis </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileInputStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;asdfas.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>抛出多个异常</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) throws FileNotFoundException, ParseException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">21</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">() throws FileNotFoundException, ParseException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    FileInputStream fis </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileInputStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;asdfas.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    SimpleDateFormat sf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleDateFormat</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;www&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    sf.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ss&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_2-2try-catch抓取异常" tabindex="-1">2.2try...catch抓取异常 <a class="header-anchor" href="#_2-2try-catch抓取异常" aria-hidden="true">#</a></h3><p>​ 我们可以对可能出现异常的代码提前做好准备。这个时候就可以使用try...catch了。</p><h4 id="_2-2-1-格式" tabindex="-1">2.2.1 格式 <a class="header-anchor" href="#_2-2-1-格式" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//可能出现异常的代码</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(异常类型 标识符){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//对异常做相应的处理</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>示例：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    FileInputStream fis </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileInputStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;asdfas.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">//如果上面出现异常 此行代码就不会执行了</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (FileNotFoundException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span><span style="color:#6A737D;">//打印异常信息</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">//异常出现之后不影响后面得代码执行</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="_2-2-2-执行流程" tabindex="-1">2.2.2 执行流程 <a class="header-anchor" href="#_2-2-2-执行流程" aria-hidden="true">#</a></h4><p>​ 如果try中的代码真的出现了异常，并且异常类型和catch中的异常类型能匹配上。这个时候就会进入指定的catch块中执行，而异常对象也会赋值给我们在catch中定义的异常变量接收。</p><p>​ 如果没有异常try中代码执行完就去执行try...catch之后的代码</p><h4 id="_2-2-3-注意事项" tabindex="-1">2.2.3 注意事项 <a class="header-anchor" href="#_2-2-3-注意事项" aria-hidden="true">#</a></h4><p>如果可能有多种异常，有多种处理方式。</p><p>①可以选择使用多个catch。</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    FileInputStream fis </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileInputStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    SimpleDateFormat sf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleDateFormat</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;www&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    sf.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ss&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (FileNotFoundException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (ParseException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>②直接定义一个父类类型</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    FileInputStream fis </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileInputStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    SimpleDateFormat sf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleDateFormat</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;www&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    sf.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ss&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">){</span><span style="color:#6A737D;">//父类引用指向子类对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_3-自定义异常" tabindex="-1">3.自定义异常 <a class="header-anchor" href="#_3-自定义异常" aria-hidden="true">#</a></h2><p>​ 我们也可以自定义异常类。如果要自定义运行时异常，只要继承RuntimeException，定义构造方法即可。如果定义编译时异常，则改成继承Exception。</p><p>示例：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyException</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Exception</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyException</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">s</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(s);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyException</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyException</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">s</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(s);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>我么可以去使用下自定义的异常。可以在代码中使用throw抛出异常对象。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Demo04</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> MyException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> MyException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;出现异常喽&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>编译时异常，必须对异常进行预处理。如果是运行时异常，不做预处理也没有问题。</p><h2 id="_4-异常的作用" tabindex="-1">4.异常的作用 <a class="header-anchor" href="#_4-异常的作用" aria-hidden="true">#</a></h2><ol><li>异常可以帮助我们知道具体的错误原因</li><li>异常可以让我们在方法调用过程中出现问题的时候，把具体的问题反馈到方法调用处。</li></ol><h1 id="集合-1" tabindex="-1">集合-1 <a class="header-anchor" href="#集合-1" aria-hidden="true">#</a></h1><h2 id="_1-集合的概念" tabindex="-1">1.集合的概念 <a class="header-anchor" href="#_1-集合的概念" aria-hidden="true">#</a></h2><p>​ 集合就是用于存储多个数据的容器。相对于具有相同功能的数组来说，集合的长度可变会更加灵活方便。Java中提供了使用不同数据结构存储数据的不同集合类，他们有各自不同的特点，并且在类中提供了很多常用方法，便于我们使用。</p><h2 id="_2-集合体系结构" tabindex="-1">2.集合体系结构 <a class="header-anchor" href="#_2-集合体系结构" aria-hidden="true">#</a></h2><p>集合类主要有两个顶层接口，Colletcion和Map。</p><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/image-20221121155000598.png" alt="image-20221121155000598"></p><h2 id="_3-常用list集合" tabindex="-1">3.常用list集合 <a class="header-anchor" href="#_3-常用list集合" aria-hidden="true">#</a></h2><h3 id="_3-1-list集合的特点" tabindex="-1">3.1 list集合的特点 <a class="header-anchor" href="#_3-1-list集合的特点" aria-hidden="true">#</a></h3><p>​ List接口下的集合都会有以下特点：</p><ul><li>有索引</li><li>可以存储重复元素</li><li>元素存入的顺序和实际存储的顺序相同</li></ul><h3 id="_3-2-arraylist" tabindex="-1">3.2 ArrayList <a class="header-anchor" href="#_3-2-arraylist" aria-hidden="true">#</a></h3><h4 id="_3-2-1-创建对象" tabindex="-1">3.2.1 创建对象 <a class="header-anchor" href="#_3-2-1-创建对象" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//没有元素类型限制</span></span>
<span class="line"><span style="color:#E1E4E8;">    ArrayList list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayList</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;三更草堂&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Integer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//只能存储指定类型的数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    ArrayList&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; list1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    list1.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;sangengcaotang&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="_3-2-2-常用方法" tabindex="-1">3.2.2 常用方法 <a class="header-anchor" href="#_3-2-2-常用方法" aria-hidden="true">#</a></h4><blockquote><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(E e)   </span><span style="color:#6A737D;">//添加元素，直接添加到集合的末尾，返回值代表是否添加成功</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index E element)   </span><span style="color:#6A737D;">//往指定索引位置添加元素</span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(Object o)  </span><span style="color:#6A737D;">//删除元素</span></span>
<span class="line"><span style="color:#E1E4E8;">E </span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index)   </span><span style="color:#6A737D;">//删除指定索引位置的元素，返回值是被删除的元素</span></span>
<span class="line"><span style="color:#E1E4E8;">E </span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index, E element)   </span><span style="color:#6A737D;">//修改指定索引位置的元素，返回值为修改之前的元素</span></span>
<span class="line"><span style="color:#E1E4E8;">E </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index)      </span><span style="color:#6A737D;">//获取指定索引位置的元素  返回值为对应元素</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()  </span><span style="color:#6A737D;">//获取集合中的元素个数</span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(Object o)   </span><span style="color:#6A737D;">//判断集合中是否存在某个元素，返回值表示是否存在</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></blockquote><p>我们 平时对集合用的最多的就是add,remove,get,set,size这几个方法</p><h4 id="_3-2-3-遍历" tabindex="-1">3.2.3 遍历 <a class="header-anchor" href="#_3-2-3-遍历" aria-hidden="true">#</a></h4><p>1.使用索引遍历</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">ArrayList&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;三&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;更&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;草&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;堂&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//遍历</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> list.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">(); i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//获取集合元素</span></span>
<span class="line"><span style="color:#E1E4E8;">    String s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> list.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>2.使用迭代器遍历</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">ArrayList&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;三&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;更&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;草&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;堂&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//迭代器遍历</span></span>
<span class="line"><span style="color:#E1E4E8;">Iterator&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; it </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> list.</span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(it.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">()){</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(it.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>注意：为了避免并发修改异常（ConcurrentModificationException）的出现。避免在使用迭代器遍历的过程中对集合进行操作。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//迭代器遍历</span></span>
<span class="line"><span style="color:#E1E4E8;">        ArrayList&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; removeList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        Iterator&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; it </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> list.</span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(it.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">()){</span></span>
<span class="line"><span style="color:#E1E4E8;">            String s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> it.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//判断是否是“更”,如果是就删除</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;更&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(s)){</span></span>
<span class="line"><span style="color:#6A737D;">//                list.remove(s);</span></span>
<span class="line"><span style="color:#E1E4E8;">                removeList.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(s);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#6A737D;">//            System.out.println(s);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        list.</span><span style="color:#B392F0;">removeAll</span><span style="color:#E1E4E8;">(removeList);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(list);</span></span>
<span class="line"><span style="color:#6A737D;">//      for (int i = list.size() - 1; i &gt;= 0; i--) {</span></span>
<span class="line"><span style="color:#6A737D;">//            String s = list.get(i);</span></span>
<span class="line"><span style="color:#6A737D;">//            //判断是否是“更”,如果是就删除</span></span>
<span class="line"><span style="color:#6A737D;">//            if (&quot;更&quot;.equals(s)){</span></span>
<span class="line"><span style="color:#6A737D;">//                list.remove(s);</span></span>
<span class="line"><span style="color:#6A737D;">//            }</span></span>
<span class="line"><span style="color:#6A737D;">//            System.out.println(s);</span></span>
<span class="line"><span style="color:#6A737D;">//        }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>3.使用foreach遍历</p><p>​ foreach是java提供的一个语法糖。可以让我们更方便的遍历集合或数组。</p><p>格式如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(元素数据类型 变量名 </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> 遍历的集合或者数组){</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//遍历的时候会把遍历到的元素赋值给我们上面定义的变量</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>例如:</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	ArrayList&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;三&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;更&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;草&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;堂&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(String s </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> list) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">String</span><span style="color:#E1E4E8;"> [] arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;三&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;更&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;草&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;堂&quot;</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String s </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> arr){</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/image-20221121155850772.png" alt="image-20221121155850772"></p><p>操作集合时，编译器在编译过程中自动把foreach转换成了迭代器的格式，所以这种写法也是会出现并发修改异常的</p><p>4.转换为数组遍历</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">ArrayList&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;三&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;更&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;草&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;堂&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] objects </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> list.</span><span style="color:#B392F0;">toArray</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> objects.length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(objects[i]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>更推荐用下面这种方法</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] strings </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> list.</span><span style="color:#B392F0;">toArray</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String string </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> strings) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(string);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_3-3-linkedlist" tabindex="-1">3.3 LinkedList <a class="header-anchor" href="#_3-3-linkedlist" aria-hidden="true">#</a></h3><h4 id="_3-3-1-创建对象" tabindex="-1">3.3.1 创建对象 <a class="header-anchor" href="#_3-3-1-创建对象" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">LinkedList list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;();</span><span style="color:#6A737D;">//不限定集合中存放元素的数据类型</span></span>
<span class="line"><span style="color:#E1E4E8;">LinkedList&lt;数据类型&gt; list2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;();</span><span style="color:#6A737D;">//限定集合中存放元素的数据类型</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_3-3-2-常用方法" tabindex="-1">3.3.2 常用方法 <a class="header-anchor" href="#_3-3-2-常用方法" aria-hidden="true">#</a></h4><blockquote><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(E e)   </span><span style="color:#6A737D;">//添加元素，直接添加到集合的末尾，返回值代表是否添加成功</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index E element)   </span><span style="color:#6A737D;">//往指定索引位置添加元素</span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(Object o)  </span><span style="color:#6A737D;">//删除元素</span></span>
<span class="line"><span style="color:#E1E4E8;">E </span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index)   </span><span style="color:#6A737D;">//删除指定索引位置的元素，返回值是被删除的元素</span></span>
<span class="line"><span style="color:#E1E4E8;">E </span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index, E element)   </span><span style="color:#6A737D;">//修改指定索引位置的元素，返回值为修改之前的元素</span></span>
<span class="line"><span style="color:#E1E4E8;">E </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index)      </span><span style="color:#6A737D;">//获取指定索引位置的元素  返回值为对应元素</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()  </span><span style="color:#6A737D;">//获取集合中的元素个数</span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(Object o)   </span><span style="color:#6A737D;">//判断集合中是否存在某个元素，返回值表示是否存在</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></blockquote><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        LinkedList&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//添加元素</span></span>
<span class="line"><span style="color:#E1E4E8;">        list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;更&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;三&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//删除元素</span></span>
<span class="line"><span style="color:#E1E4E8;">        list.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;三&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//修改元素</span></span>
<span class="line"><span style="color:#E1E4E8;">        list.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;三更草堂&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//获取元素</span></span>
<span class="line"><span style="color:#E1E4E8;">        String s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> list.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//获取集合大小</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> size </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> list.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//判断元素是否存在</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> sangeng </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> list.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;三更草堂&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>上面这些给发其实和ArrayList中的常用方法都是相同的。因为LinkedList和ArrayList都是List接口的实现类，上面的很多方法都是他们共同接口中定义的方法，所以都会有。</p><p>下面是LinkedList的一些特有方法：</p><blockquote><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addFirst</span><span style="color:#E1E4E8;">(E e)  </span><span style="color:#6A737D;">//把元素添加到集合最前面</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addLast</span><span style="color:#E1E4E8;">(E e)   </span><span style="color:#6A737D;">//把元素添加到集合最后面</span></span>
<span class="line"><span style="color:#E1E4E8;">E </span><span style="color:#B392F0;">removeFirst</span><span style="color:#E1E4E8;">()     </span><span style="color:#6A737D;">//删除集合最前面的一个元素，返回被删除的元素</span></span>
<span class="line"><span style="color:#E1E4E8;">E </span><span style="color:#B392F0;">removeLast</span><span style="color:#E1E4E8;">()     </span><span style="color:#6A737D;">//删除集合最后面的一个元素，返回被删除的元素</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></blockquote><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    LinkedList&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;三&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;更&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;草&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;堂&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    list.</span><span style="color:#B392F0;">addFirst</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    list.</span><span style="color:#B392F0;">addLast</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;]&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    list.</span><span style="color:#B392F0;">removeFirst</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    list.</span><span style="color:#B392F0;">removeLast</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="_3-3-3-遍历" tabindex="-1">3.3.3 遍历 <a class="header-anchor" href="#_3-3-3-遍历" aria-hidden="true">#</a></h4><p>​ 和ArrayList一样</p><h3 id="_3-4-arraylist和linkedlist的区别" tabindex="-1">3.4 ArrayList和LinkedList的区别 <a class="header-anchor" href="#_3-4-arraylist和linkedlist的区别" aria-hidden="true">#</a></h3><p>​ 都是实现了List接口，不同点是底层存储数据的结构不同。ArrayList底层是用数组来存储，而LinkedList是链表。所以各自的特点也和数据结构的特点一样。</p><p>​ <strong>ArrayList ： 查找快，增删慢</strong></p><p>​ <strong>LinkedList：增删快，查找慢</strong></p><h1 id="集合-2" tabindex="-1">集合-2 <a class="header-anchor" href="#集合-2" aria-hidden="true">#</a></h1><h2 id="_1-常用set集合" tabindex="-1">1.常用Set集合 <a class="header-anchor" href="#_1-常用set集合" aria-hidden="true">#</a></h2><h3 id="_1-1-set集合的特点" tabindex="-1">1.1 Set集合的特点 <a class="header-anchor" href="#_1-1-set集合的特点" aria-hidden="true">#</a></h3><p>​ Set接口下的集合都会有以下特点:</p><ul><li>不能存储重复元素</li><li>没有索引</li></ul><h3 id="_1-2-hashset" tabindex="-1">1.2 HashSet <a class="header-anchor" href="#_1-2-hashset" aria-hidden="true">#</a></h3><p>HashSet集合的特点</p><ul><li>底层数据结构是哈希表</li><li>存储元素的顺序和遍历获取出来的顺序可能不一致</li><li>没有索引</li><li>集合中不能存储重复元素</li></ul><h4 id="_1-2-1-创建对象" tabindex="-1">1.2.1 创建对象 <a class="header-anchor" href="#_1-2-1-创建对象" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">HashSet&lt;元素数据类型&gt; set </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashSet&lt;&gt;();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    HashSet&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; set </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashSet&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_1-2-2-常用方法" tabindex="-1">1.2.2 常用方法 <a class="header-anchor" href="#_1-2-2-常用方法" aria-hidden="true">#</a></h4><blockquote><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(E e)   </span><span style="color:#6A737D;">//添加元素，如果元素添加不成功    返回值代表是否添加成功</span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(Object o)  </span><span style="color:#6A737D;">//删除元素，返回值代表是否删除成功</span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(Object o)  </span><span style="color:#6A737D;">//判断元素是否存在</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">//获取集合的大小</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></blockquote><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    HashSet&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; set </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashSet&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//添加元素</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> f </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> set.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;三&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    set.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;更&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    set.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;草&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    set.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;堂&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> f2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> set.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;三&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//删除元素</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> f3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> set.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;三&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> f4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> set.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;三&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//判断元素是否存在</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> geng </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> set.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;更&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//获取集合大小</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> size </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> set.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h4 id="_1-2-3-遍历" tabindex="-1">1.2.3 遍历 <a class="header-anchor" href="#_1-2-3-遍历" aria-hidden="true">#</a></h4><p>1.转换为数组遍历</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//转换成数组遍历</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] strings </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> set.</span><span style="color:#B392F0;">toArray</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> strings.length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(strings[i]);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>2.迭代器遍历</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#6A737D;">//迭代器遍历</span></span>
<span class="line"><span style="color:#E1E4E8;">Iterator&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; iterator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> set.</span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(iterator.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">()){</span></span>
<span class="line"><span style="color:#E1E4E8;">    String s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> iterator.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>3.foreach语法糖遍历</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String s </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> set) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_2-泛型" tabindex="-1">2.泛型 <a class="header-anchor" href="#_2-泛型" aria-hidden="true">#</a></h2><h3 id="_2-1-概述-1" tabindex="-1">2.1 概述 <a class="header-anchor" href="#_2-1-概述-1" aria-hidden="true">#</a></h3><p>​ 泛型可以把类型明确的工作推迟到创建对象或调用方法的时候才去明确的特殊的类型。</p><p>​ 相当于把数据类型作为参数来进行传递。</p><p>​ <strong>注意：泛型只能是引用数据类型。</strong></p><h3 id="_2-2-使用" tabindex="-1">2.2 使用 <a class="header-anchor" href="#_2-2-使用" aria-hidden="true">#</a></h3><h4 id="_2-2-1-泛型类-泛型接口" tabindex="-1">2.2.1 泛型类&amp;泛型接口 <a class="header-anchor" href="#_2-2-1-泛型类-泛型接口" aria-hidden="true">#</a></h4><p>​ 泛型类和泛型接口的作用都相同，下面我们以泛型类为例进行讲解。</p><p>​ 泛型类就是把泛型定义在类上，用户使用该类的时候，才把类型明确下来。</p><h5 id="_2-2-1-1-自定义泛型" tabindex="-1">2.2.1.1 自定义泛型 <a class="header-anchor" href="#_2-2-1-1-自定义泛型" aria-hidden="true">#</a></h5><p>​ 在类名后加&lt;&gt;,在&lt;&gt;中定义泛型,&lt;&gt;中的内容相当于泛型的名字,可以随便写.在泛型类中我们可以把这个泛型的名字当做一个数据类型来使用.</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestClass</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//.....</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="_2-2-1-2-使用泛型" tabindex="-1">2.2.1.2 使用泛型 <a class="header-anchor" href="#_2-2-1-2-使用泛型" aria-hidden="true">#</a></h5><p>​ 在泛型类中可以使用在类名后面定义的泛型.</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestClass</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(T </span><span style="color:#FFAB70;">t</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="_2-2-1-3-泛型的确定" tabindex="-1">2.2.1.3 泛型的确定 <a class="header-anchor" href="#_2-2-1-3-泛型的确定" aria-hidden="true">#</a></h5><p>①创建对象时确定</p><p>​ 在创建泛型类对象的时候确定之前定义的泛型代表什么数据类型。在定义泛型类对象的时候，在类名的后面加&lt;&gt;，在其中写一个具体的数据类型。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Box&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; box </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Box&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    box.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;三更草堂&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    Box&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; integerBox </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Box&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    integerBox.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>②定义子类时确定</p><p>​ 在定义子类的时候可以确定泛型。具体用法如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SubClass</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestClass</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">s</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>​ 这样在子类SubClass中泛型就确定为String类型了</p><p>**注意：**我们在定义子类时也可以选择不确定泛型，让其在创建对象的时候再确定。写法如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SubClass</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestClass</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(T </span><span style="color:#FFAB70;">s</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(t);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_2-2-2泛型方法" tabindex="-1">2.2.2泛型方法 <a class="header-anchor" href="#_2-2-2泛型方法" aria-hidden="true">#</a></h4><h5 id="_2-2-2-1定义泛型" tabindex="-1">2.2.2.1定义泛型 <a class="header-anchor" href="#_2-2-2-1定义泛型" aria-hidden="true">#</a></h5><p>​ 在方法返回值类型的前面加&lt;&gt;,在&lt;&gt;中定义泛型,&lt;&gt;中的内容相当于泛型的名字,可以随便写.在该泛型方法中我们可以把这个泛型的名字当做一个数据类型来使用.</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(T t){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> t;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="_2-2-2-2-使用泛型" tabindex="-1">2.2.2.2 使用泛型 <a class="header-anchor" href="#_2-2-2-2-使用泛型" aria-hidden="true">#</a></h5><p>​ 在泛型方法中可以使用定义的泛型。并且我们一般是在参数列表中或者是返回类型上使用这个泛型。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(T t){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> t;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="_2-2-2-3-泛型方法的确定" tabindex="-1">2.2.2.3 泛型方法的确定 <a class="header-anchor" href="#_2-2-2-3-泛型方法的确定" aria-hidden="true">#</a></h5><p>​ <strong>在调用泛型方法</strong>的时候才真正确定之前定义的泛型代表什么数据类型。<strong>在调用泛型方法的时候</strong>，程序会根据你的调用自动推导泛型的具体类型。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Integer test </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    String s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;三更草堂&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_2-3-泛型上限-泛型下限" tabindex="-1">2.3 泛型上限&amp;泛型下限 <a class="header-anchor" href="#_2-3-泛型上限-泛型下限" aria-hidden="true">#</a></h3><h4 id="_2-3-1-泛型限定的概念" tabindex="-1">2.3.1 泛型限定的概念 <a class="header-anchor" href="#_2-3-1-泛型限定的概念" aria-hidden="true">#</a></h4><p>​ 我们在使用确定泛型的时候可以使用任意的引用数据类型去确定。但是在某些场景下我们要求这个泛型必须是某个子类或者某个类的父类。这种情况下我们就需要用到泛型上限和泛型下限来限制泛型的范围。</p><h4 id="_2-3-2-泛型上限" tabindex="-1">2.3.2 泛型上限 <a class="header-anchor" href="#_2-3-2-泛型上限" aria-hidden="true">#</a></h4><p>​ 限制泛型必须是某个类或者是其子类。</p><p>格式：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> extends 具体的类型</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(List</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> extends Person</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> t){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Demo05</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ArrayList&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        ArrayList&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; list2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        ArrayList&lt;</span><span style="color:#F97583;">Person</span><span style="color:#E1E4E8;">&gt; list3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;</span><span style="color:#F97583;">Person</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        list3.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;lsadfjk&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#6A737D;">//        test(list);</span></span>
<span class="line"><span style="color:#6A737D;">//        test(list2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        ArrayList&lt;</span><span style="color:#F97583;">Student</span><span style="color:#E1E4E8;">&gt; list4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;</span><span style="color:#F97583;">Student</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        list4.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Student</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;xiaoming&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(list3);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(list4);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(List&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Person</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">list</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        Person o </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> list.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(o.</span><span style="color:#B392F0;">getAge</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>这样我们再调用test方法的时候只能存入泛型为Person或者是Person子类的List集合对象。</p><h4 id="_2-3-3-泛型下限" tabindex="-1">2.3.3 泛型下限 <a class="header-anchor" href="#_2-3-3-泛型下限" aria-hidden="true">#</a></h4><p>​ 限制泛型必须是某个类或者其父类。</p><p>格式：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> 具体的类型</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(List</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> Student</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> t){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这样我们再调用test方法的时候只能存入泛型类型为Student或者是Student父类的 List集合对象。</p><h4 id="_2-3-4-注意事项" tabindex="-1">2.3.4 注意事项 <a class="header-anchor" href="#_2-3-4-注意事项" aria-hidden="true">#</a></h4><ol><li>泛型上限可以在定义泛型类和方法参数上使用。</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Box</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Person</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    T e;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#6A737D;">//下限这样写没有意义，所以不需要从类上限制</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol><li>泛型下限主要在方法参数上使用。</li></ol><h1 id="集合-3" tabindex="-1">集合-3 <a class="header-anchor" href="#集合-3" aria-hidden="true">#</a></h1><h2 id="_1-常用map集合" tabindex="-1">1.常用Map集合 <a class="header-anchor" href="#_1-常用map集合" aria-hidden="true">#</a></h2><h3 id="_1-1-map集合的概述" tabindex="-1">1.1 Map集合的概述 <a class="header-anchor" href="#_1-1-map集合的概述" aria-hidden="true">#</a></h3><p>​ Map接口是双列集合的顶层接口，下面是Map接口的定义</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Map</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">K</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">V</span><span style="color:#E1E4E8;">&gt; K:键的类型；V：值的类型</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>​ 存储的数据必须包含key和value。</p><p>​ key和value在Map集合中是一一对应的关系。一个key对应一个value，称为键值对</p><p>​ key在Map集合中是不会重复的。</p><h3 id="_1-2hashmap" tabindex="-1">1.2HashMap <a class="header-anchor" href="#_1-2hashmap" aria-hidden="true">#</a></h3><p>HashMap集合的特点</p><ul><li>底层数据结构是哈希表</li><li>存储元素的顺序和遍历获取出来的顺序可能不一致</li><li>key不会重复</li></ul><h4 id="_1-2-1-创建对象-1" tabindex="-1">1.2.1 创建对象 <a class="header-anchor" href="#_1-2-1-创建对象-1" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">HashMap</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">key的数据类型，value的数据类型</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    HashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    HashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; map1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_1-2-2-常用方法-1" tabindex="-1">1.2.2 常用方法 <a class="header-anchor" href="#_1-2-2-常用方法-1" aria-hidden="true">#</a></h4><blockquote><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">V </span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(K key, V value) </span><span style="color:#6A737D;">//添加元素，如果key不存在就添加，如果key已经存在则是修改对应的value的值，并且返回修改前的value</span></span>
<span class="line"><span style="color:#E1E4E8;">V </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(Object key) </span><span style="color:#6A737D;">//根据可以获取对应的value值返回.如果key不存在就返回null</span></span>
<span class="line"><span style="color:#E1E4E8;">V </span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(Object key) </span><span style="color:#6A737D;">//根据key删除map中对应的键值对.并且把删除的value返回</span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">containsKey</span><span style="color:#E1E4E8;">(Object key) </span><span style="color:#6A737D;">//判断key是否存在</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">//集合中键值对的对数</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">//清空集合中的所有键值对</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></blockquote><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Demo02</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        HashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#6A737D;">//        map.put()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//添加元素</span></span>
<span class="line"><span style="color:#E1E4E8;">        map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;三更&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;age&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;123&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        String v </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;三更草堂&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        String name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> map.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        String age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> map.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;age&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//删除元素</span></span>
<span class="line"><span style="color:#E1E4E8;">        String age1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> map.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;age&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//判断key是否存在</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(map.</span><span style="color:#B392F0;">containsKey</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            String age111 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> map.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(age111.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//size方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(map.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//清空键值对</span></span>
<span class="line"><span style="color:#E1E4E8;">        map.</span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h4 id="_1-2-3-遍历-1" tabindex="-1">1.2.3 遍历 <a class="header-anchor" href="#_1-2-3-遍历-1" aria-hidden="true">#</a></h4><p>1.使用entrySet遍历</p><p>​ map集合的entrySet方法可以获取一个Set集合，集合中存放的是Entry对象，一个Entry对象相当于一个键值对。我们可以遍历set集合拿到Entry对象，然后获取出里面的键和值。</p><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/image-20221121155954007.png" alt="image-20221121155954007"></p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        HashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//添加元素</span></span>
<span class="line"><span style="color:#E1E4E8;">        map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;三更&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;age&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;15&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//遍历集合</span></span>
<span class="line"><span style="color:#E1E4E8;">        Set&lt;</span><span style="color:#F97583;">Map</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">Entry</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;&gt; entries </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> map.</span><span style="color:#B392F0;">entrySet</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">//        System.out.println(entries);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Map.Entry&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; entry </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> entries) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(entry.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;===&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">entry.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>2.使用KeySet遍历</p><p>​ map集合的keySet方法可以获取一个Set集合，集合中存放的是所有的key。我们可以遍历set集合拿到key对象，然后通过key获取对应的对象。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        HashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//添加元素</span></span>
<span class="line"><span style="color:#E1E4E8;">        map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;三更&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;age&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;15&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//遍历</span></span>
<span class="line"><span style="color:#E1E4E8;">        Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; strings </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> map.</span><span style="color:#B392F0;">keySet</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">//        System.out.println(strings);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String key </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> strings) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(key </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;===&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> map.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(key));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="_1-3-hashmap的key去重原理" tabindex="-1">1.3 HashMap的key去重原理 <a class="header-anchor" href="#_1-3-hashmap的key去重原理" aria-hidden="true">#</a></h3><p>​ HashMap在添加元素的时候会判断集合中是否有key和本次存入的key相同。判断的时候主要是通过hashCode方法和equals方法来进行判断的。hashCode相同，并且equals判断也相同就会认为是同一个key。</p><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/image-20221121160016406.png" alt="image-20221121160016406"></p><p>​ 所以如果我们要村粗到HashMap中的key是一个自定义的类型。就需要根据情况判断下是否需要重写hashCode方法和equals方法。重写的时候使用IDEA提示即可。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Student</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> age;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setAge</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">age</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> age;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//重写equals</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">o</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> o) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (o </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> o.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        Student student </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Student) o;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> age </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> student.age </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">                Objects.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(name, student.name);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//重写hashCode</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hashCode</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Objects.</span><span style="color:#B392F0;">hash</span><span style="color:#E1E4E8;">(age, name);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getAge</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> age;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> name;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Student</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Student</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">age</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> age;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h1 id="io流-1" tabindex="-1">IO流-1 <a class="header-anchor" href="#io流-1" aria-hidden="true">#</a></h1><h2 id="_1-file" tabindex="-1">1.File <a class="header-anchor" href="#_1-file" aria-hidden="true">#</a></h2><h3 id="_1-1-概述" tabindex="-1">1.1 概述 <a class="header-anchor" href="#_1-1-概述" aria-hidden="true">#</a></h3><p>​ File对象主要是用来表示文件或者是目录的路径的。类中提供了很多对文件或者文件夹操作的常用方法。</p><h3 id="_1-2-创建对象" tabindex="-1">1.2 创建对象 <a class="header-anchor" href="#_1-2-创建对象" aria-hidden="true">#</a></h3><ul><li><p>绝对路径</p><p>以磁盘名开头的路径。例如：D:\\xxx\\xxx</p></li><li><p>相对路径</p><p>不是以盘符开头的，相对于当前项目下的路径。例如：a.txt</p></li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(String pathname)  </span><span style="color:#6A737D;">//通过字符串类型的路径来创建对象</span></span>
<span class="line"><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(String parent， String child)  </span><span style="color:#6A737D;">//通过父目录的路径（字符串类型）和（文件夹）名称来创建对象</span></span>
<span class="line"><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(File parent, String child) </span><span style="color:#6A737D;">//通过父目录的路径（File类型）和文件（文件夹）名称来创建对象</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_1-3-常用方法" tabindex="-1">1.3 常用方法 <a class="header-anchor" href="#_1-3-常用方法" aria-hidden="true">#</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createNewFile</span><span style="color:#E1E4E8;">()</span><span style="color:#6A737D;">//根据路径创建一个文件，返回值表示是否创建成功</span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mkdir</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">//根据路径创建一个文件夹，返回值表示是否创建成功</span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mkdirs</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">//根据路径创建一个文件夹，如果父目录不存在会自动创建父目录</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">exists</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">//判断文件或者文件夹是否存在</span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isFile</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">//判断是否是一个文件</span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isDirectory</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">//判断是否是一个文件夹</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">//删除文件，或者删除空文件夹，返回值代表删除是否成功</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">//获取一个文件的大小，对文件夹无意义</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">String </span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">//获取文件或文件夹的名字</span></span>
<span class="line"><span style="color:#E1E4E8;">File </span><span style="color:#B392F0;">getPartentFile</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">//获取父目录的File对象</span></span>
<span class="line"><span style="color:#E1E4E8;">String </span><span style="color:#B392F0;">getAbsolutePath</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">//获取File对象的绝对路径</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="_1-4-重要方法" tabindex="-1">1.4 重要方法 <a class="header-anchor" href="#_1-4-重要方法" aria-hidden="true">#</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">File</span><span style="color:#E1E4E8;">[] list </span><span style="color:#B392F0;">Files</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">//如果当前File对象是一个文件夹，可以获取文件夹下的所有文件或者文件夹的File对象。</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>注意：如果不是文件夹或者文件夹的权限受限返回值是null。所以一定要对返回结果做非空判断。</p><h2 id="_2-递归" tabindex="-1">2.递归 <a class="header-anchor" href="#_2-递归" aria-hidden="true">#</a></h2><p>​ 在方法中调用方法本身 就是递归</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">f</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> n){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(n </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> n</span><span style="color:#F97583;">*</span><span style="color:#B392F0;">f</span><span style="color:#E1E4E8;">(n</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>注意：我们在使用递归的过程中一定要保证递归能结束，不能无限递归下去，不然会出现栈溢出（StackOverflowError）的情况。</strong></p><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/image-20221121160053549.png" alt="image-20221121160053549"></p><p>小结：如果既可以用递归解决又可以用循环解决。我们一般用循环解决</p><h1 id="io流-2" tabindex="-1">IO流-2 <a class="header-anchor" href="#io流-2" aria-hidden="true">#</a></h1><h2 id="_1-io流概述" tabindex="-1">1.IO流概述 <a class="header-anchor" href="#_1-io流概述" aria-hidden="true">#</a></h2><p>​ 当需要进行数据的传输的时候可以使用IO流来进行。例如：把磁盘中文件的数据读取到内存中。把内存中的数据写入到磁盘中。把网络中的数据读取到内存中。</p><h2 id="_2-io流的分类" tabindex="-1">2.IO流的分类 <a class="header-anchor" href="#_2-io流的分类" aria-hidden="true">#</a></h2><p>​ IO流根据处理数据类型的不同分为字符流和字节流，根据数据流向不同分为输入流和输出流，对输入流只能进行读操作，对输出流只能进行写操作。</p><table><thead><tr><th>数据类型</th><th>流向</th><th>顶层父类</th></tr></thead><tbody><tr><td>字节流</td><td>输入（读）</td><td>java.io.InputStream</td></tr><tr><td>字节流</td><td>输出（写）</td><td>java.io.OutputStream</td></tr><tr><td>字符流</td><td>输入（读）</td><td>java.io.Reader</td></tr><tr><td>字符流</td><td>输出（写）</td><td>java.io.Writer</td></tr></tbody></table><h2 id="_3-字节输入流" tabindex="-1">3.字节输入流 <a class="header-anchor" href="#_3-字节输入流" aria-hidden="true">#</a></h2><p>​ 所有字节输入流的父类是java.io.InputStream,它是以字节为单位的输入流。</p><p>​ 我们就以FileInputStream为例进行学习。</p><h3 id="_3-1-fileinputstream概述" tabindex="-1">3.1 FileInputStream概述 <a class="header-anchor" href="#_3-1-fileinputstream概述" aria-hidden="true">#</a></h3><p>​ FileInputStream是用来读取文件数据的字节输入流。</p><h3 id="_3-2-fileinputstream对象创建" tabindex="-1">3.2 FIleInputStream对象创建 <a class="header-anchor" href="#_3-2-fileinputstream对象创建" aria-hidden="true">#</a></h3><p>构造方法如如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#B392F0;">FileInputStream</span><span style="color:#E1E4E8;">(String name) throws FileNotFoundException </span><span style="color:#6A737D;">//传入文件路径创建对象</span></span>
<span class="line"><span style="color:#B392F0;">FileInputStream</span><span style="color:#E1E4E8;">(File file) throws FileNotFoundException </span><span style="color:#6A737D;">//传入文件路径的File对象来创建流对象</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>范例：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) throws FileNotFoundException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    FileInputStream fis </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileInputStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">sadf.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    File file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">sadf.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    FileInputStream fis2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileInputStream</span><span style="color:#E1E4E8;">(file);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_3-3-读取数据" tabindex="-1">3.3 读取数据 <a class="header-anchor" href="#_3-3-读取数据" aria-hidden="true">#</a></h3><p>​ 我们可以使用FileInputStream来读取文件中的数据。</p><h4 id="_3-3-1-一次读取一个字节" tabindex="-1">3.3.1 一次读取一个字节 <a class="header-anchor" href="#_3-3-1-一次读取一个字节" aria-hidden="true">#</a></h4><p>核心方法如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">() throws IOException </span><span style="color:#6A737D;">//读取一个字节的数据作为返回值返回 返回值为-1时，表示里面已经没有数据</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>范例：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) throws IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        FileInputStream fis </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileInputStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">sadf.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">//        读取数据</span></span>
<span class="line"><span style="color:#6A737D;">//        int b = fis.read();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">((b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fis.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(b);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//释放资源</span></span>
<span class="line"><span style="color:#E1E4E8;">        fis.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>3.3.2 一次读取一个字节数组</p><div class="language-JAVA line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JAVA</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;"> b[]) throws IOException </span><span style="color:#6A737D;">//传入一个数组，最多读取一个字节数组的数据，并且会把数据存入数组中，返回值代表本次读取到的字节的个数。返回值为-1代表读到了末尾</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>范例：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) throws IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        FileInputStream fis </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileInputStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">sadf.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">//        读取数据 一次读一个字节数组</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] bytes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> len;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> ((len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fis.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">(bytes)) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(bytes,</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,len));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//释放资源</span></span>
<span class="line"><span style="color:#E1E4E8;">        fis.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_3-4-资源释放" tabindex="-1">3.4 资源释放 <a class="header-anchor" href="#_3-4-资源释放" aria-hidden="true">#</a></h3><p>​ 我们在前面处理异常的时候都同意了声明抛出的处理。但是这很有可能导致在出现了异常时资源没有被正确的释放。所以我们要更合理的处理异常，尤其是处理还资源释放的问题。</p><h4 id="_3-4-1-jdk6版本" tabindex="-1">3.4.1 JDK6版本 <a class="header-anchor" href="#_3-4-1-jdk6版本" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        FileInputStream fis </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            fis </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileInputStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">sadf.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">//        读取数据 一次读一个字节数组</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] bytes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> len;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> ((len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fis.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">(bytes)) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(bytes,</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,len));</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        }</span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">            e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span><span style="color:#6A737D;">//无论有没有出现异常 这里面的代码都会被执行</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//释放资源</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (fis </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    fis.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h4 id="_3-4-2-jdk7版本" tabindex="-1">3.4.2 JDK7版本 <a class="header-anchor" href="#_3-4-2-jdk7版本" aria-hidden="true">#</a></h4><p>可以使用try...catch...resource的写法，在try的后面加小括号，把需要释放的资源在小括号中定义。我们就不需要自己去释放资源，jvm会帮我们在最后调用close方法释放资源。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//有了这个接口，无论有没有异常，程序都会给我们调用释放资源的方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">(FileInputStream fis </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileInputStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">sadf.txt&quot;</span><span style="color:#E1E4E8;">);){</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//        读取数据 一次读一个字节数组</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] bytes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> len;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> ((len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fis.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">(bytes)) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(bytes,</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,len));</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//释放资源</span></span>
<span class="line"><span style="color:#6A737D;">//            fis.close();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">            e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="_3-4-3-jdk9版本" tabindex="-1">3.4.3 JDK9版本 <a class="header-anchor" href="#_3-4-3-jdk9版本" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">FileInputStream fis </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileInputStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">sadf.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">(fis){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//        读取数据 一次读一个字节数组</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] bytes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> len;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> ((len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fis.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">(bytes)) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(bytes,</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,len));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//释放资源</span></span>
<span class="line"><span style="color:#E1E4E8;">    fis.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="_4-字节输出流" tabindex="-1">4.字节输出流 <a class="header-anchor" href="#_4-字节输出流" aria-hidden="true">#</a></h2><p>​ 所有字节输出流的父类是 java.io.OutputStream,它是以字节为单位的输出流。</p><p>​ 我们就以FileOutputStream为例进行学习。</p><h3 id="_4-1-fileoutputstream概述" tabindex="-1">4.1 FileOutputStream概述 <a class="header-anchor" href="#_4-1-fileoutputstream概述" aria-hidden="true">#</a></h3><p>​ FileOutputStream是用来往文件中写入数据的字节输出流。</p><h3 id="_4-2-fileoutputstream对象创建" tabindex="-1">4.2 FileOutputStream对象创建 <a class="header-anchor" href="#_4-2-fileoutputstream对象创建" aria-hidden="true">#</a></h3><p>常用构造方法如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#B392F0;">FileOutputStream</span><span style="color:#E1E4E8;">(String name) throws FileNotFoundException </span><span style="color:#6A737D;">//传入文件路径创建对象</span></span>
<span class="line"><span style="color:#B392F0;">FileOutputStream</span><span style="color:#E1E4E8;">(File file) throws FileNOtFoundException </span><span style="color:#6A737D;">//传入文件路径的File对象来创建流对象</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>示例：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) throws FileNotFoundException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        FileOutputStream fos </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileOutputStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">sadf.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        File file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">sadf.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        FileOutputStream fos2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileOutputStream</span><span style="color:#E1E4E8;">(file);</span></span>
<span class="line"><span style="color:#6A737D;">//        另外一种写法：匿名对象 构造写法 也是可以的</span></span>
<span class="line"><span style="color:#6A737D;">//        FileOutputStream fos3 = new FileOutputStream(new File(&quot;C:\\\\Users\\\\DunXi\\\\Desktop\\\\test\\\\sadf.txt&quot;););</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_4-3-写数据" tabindex="-1">4.3 写数据 <a class="header-anchor" href="#_4-3-写数据" aria-hidden="true">#</a></h3><p>​ 我们可以使用FileOutputStream来往文件中写入字节数据。</p><h4 id="_4-3-1-一次写一个字节" tabindex="-1">4.3.1 一次写一个字节 <a class="header-anchor" href="#_4-3-1-一次写一个字节" aria-hidden="true">#</a></h4><p>核心方法如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> b) throws IOException </span><span style="color:#6A737D;">//传入一个字节数据，把字节数据写入文件</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>范例：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) throws IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        File file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">sadf.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        FileOutputStream fos2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileOutputStream</span><span style="color:#E1E4E8;">(file);</span></span>
<span class="line"><span style="color:#E1E4E8;">        fos2.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        fos2.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_4-3-2-一次写一个字节数组" tabindex="-1">4.3.2 一次写一个字节数组 <a class="header-anchor" href="#_4-3-2-一次写一个字节数组" aria-hidden="true">#</a></h4><p>核心方法如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;"> b[]) throws IOException </span><span style="color:#6A737D;">//存入一个字节数组，把字节数组中的数据全部写入文件</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;"> b[] , </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> off, in len) throws IOException </span><span style="color:#6A737D;">//存入一个字节数组，把字节数组中从off索引开始len个元素写入文件</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>范例：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) throws IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        File file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">sadf.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        FileOutputStream fos2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileOutputStream</span><span style="color:#E1E4E8;">(file);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] bytes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;abc&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">//        fos2.write(bytes);//一次把整个数组都写进去</span></span>
<span class="line"><span style="color:#E1E4E8;">        fos2.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(bytes,</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">//只写入数组中的部分数据</span></span>
<span class="line"><span style="color:#E1E4E8;">        fos2.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_4-4-文件续写" tabindex="-1">4.4 文件续写 <a class="header-anchor" href="#_4-4-文件续写" aria-hidden="true">#</a></h3><p>​ 如果之前使用构造方法创建的流对象，每次流对象创建的时候就会把文件中的内容清空。所以没有办法实现续写效果。如果需要续写就需要使用另外的构造方法。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#B392F0;">FileOutputStream</span><span style="color:#E1E4E8;">(String name,</span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> append) throws FileNotFoundException </span><span style="color:#6A737D;">//第二个参数代表是否续写</span></span>
<span class="line"><span style="color:#B392F0;">FileOutputStream</span><span style="color:#E1E4E8;">(File file, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> append) throws FileNotFoundException </span><span style="color:#6A737D;">//第二个参数代表是否续写</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>​ 使用什么的构造创建流对象，并且第二个参数传入true，就不会清空文件中原有的内容。实现文件续写的效果。</p><p>范例：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) throws IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        File file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">sadf.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        FileOutputStream fos2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileOutputStream</span><span style="color:#E1E4E8;">(file,</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] bytes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;abc&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">//        fos2.write(bytes);</span></span>
<span class="line"><span style="color:#E1E4E8;">        fos2.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(bytes,</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        fos2.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_5-练习" tabindex="-1">5.练习 <a class="header-anchor" href="#_5-练习" aria-hidden="true">#</a></h2><h3 id="_5-1-文件复制" tabindex="-1">5.1 文件复制 <a class="header-anchor" href="#_5-1-文件复制" aria-hidden="true">#</a></h3><p>​ 要求定义一个方法，该方法能够实现文件的复制</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) throws IOException {</span></span>
<span class="line"><span style="color:#6A737D;">//        要求定义一个方法，该方法能够实现文件的复制</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//文件的复制就是循环的读写，直到操作完所有的数据为止</span></span>
<span class="line"><span style="color:#E1E4E8;">        File src </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">sadf.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        File destDir </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">a&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">copyFile</span><span style="color:#E1E4E8;">(src,destDir);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//原文件路径 File srcFile</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//目标文件的存放为止 File destDir</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">copyFile</span><span style="color:#E1E4E8;">(File srcFile, File destDir) throws IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//在destDir下创建一个跟srcFile同名的文件</span></span>
<span class="line"><span style="color:#E1E4E8;">        File destFile </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(destDir,srcFile.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//读取源文件，然后把读到的数据写入目标文件</span></span>
<span class="line"><span style="color:#E1E4E8;">        FileInputStream fis </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileInputStream</span><span style="color:#E1E4E8;">(srcFile);</span></span>
<span class="line"><span style="color:#E1E4E8;">        FileOutputStream fos </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileOutputStream</span><span style="color:#E1E4E8;">(destFile,</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] bytes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> len;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">((len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fis.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">(bytes)) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//把读到的内容写到新文件中</span></span>
<span class="line"><span style="color:#E1E4E8;">            fos.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(bytes,</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,len);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//释放资源</span></span>
<span class="line"><span style="color:#E1E4E8;">        fis.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        fos.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="_5-2-文件夹复制" tabindex="-1">5.2 文件夹复制 <a class="header-anchor" href="#_5-2-文件夹复制" aria-hidden="true">#</a></h3><p>​ 要求定义一个方法，该方法能够实现文件夹的复制</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) throws IOException {</span></span>
<span class="line"><span style="color:#6A737D;">//        要求定义一个方法，该方法能够实现文件夹的复制 ,考虑有子文件夹的情况</span></span>
<span class="line"><span style="color:#E1E4E8;">        File srcDir </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        File destDir </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">copyDir</span><span style="color:#E1E4E8;">(srcDir,destDir);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//File srcDir  源文件夹</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//File destDir  要复制到的文件夹</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">copyDir</span><span style="color:#E1E4E8;">(File srcDir,File dest) throws IOException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">(srcDir.</span><span style="color:#B392F0;">exists</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> srcDir.</span><span style="color:#B392F0;">isDirectory</span><span style="color:#E1E4E8;">())){</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;源文件夹必须存在并且是一个文件夹&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">dest.</span><span style="color:#B392F0;">isDirectory</span><span style="color:#E1E4E8;">()){</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;目标文件夹必须是一个文件夹&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//1.在目标文件夹下创建一个和源文件夹同名的文件夹</span></span>
<span class="line"><span style="color:#E1E4E8;">        File destDir </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(dest,srcDir.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        destDir.</span><span style="color:#B392F0;">mkdir</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//2.获取源文件夹下的所有子文件</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">File</span><span style="color:#E1E4E8;">[] files </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> srcDir.</span><span style="color:#B392F0;">listFiles</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(files </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//3.遍历数组，复制每一个文件到目标文件夹下</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (File file </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> files) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (file.</span><span style="color:#B392F0;">isFile</span><span style="color:#E1E4E8;">()){</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">copyFile</span><span style="color:#E1E4E8;">(file,destDir);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">copyDir</span><span style="color:#E1E4E8;">(file,destDir);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">copyFile</span><span style="color:#E1E4E8;">(File srcFile, File destDir) throws IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//在destDir下创建一个跟srcFile同名的文件</span></span>
<span class="line"><span style="color:#E1E4E8;">        File destFile </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(destDir,srcFile.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//读取源文件，然后把读到的数据写入目标文件</span></span>
<span class="line"><span style="color:#E1E4E8;">        FileInputStream fis </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileInputStream</span><span style="color:#E1E4E8;">(srcFile);</span></span>
<span class="line"><span style="color:#E1E4E8;">        FileOutputStream fos </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileOutputStream</span><span style="color:#E1E4E8;">(destFile,</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] bytes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> len;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">((len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fis.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">(bytes)) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//把读到的内容写到新文件中</span></span>
<span class="line"><span style="color:#E1E4E8;">            fos.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(bytes,</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,len);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//释放资源</span></span>
<span class="line"><span style="color:#E1E4E8;">        fis.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        fos.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><h1 id="io流-3" tabindex="-1">IO流-3 <a class="header-anchor" href="#io流-3" aria-hidden="true">#</a></h1><h2 id="_1-编码表" tabindex="-1">1.编码表 <a class="header-anchor" href="#_1-编码表" aria-hidden="true">#</a></h2><p>​ 计算机要准确的存储和识别各种字符集符号，就需要进行字符编码，一套字符集必然至少有一套字符编码。<strong>如果编码和解码不是用一个编码表</strong>就会出现<strong>乱码</strong>问题。</p><p>​ 编码（加密）看懂的---》看不懂</p><p>​ 解码（解密）看不懂---》看懂的</p><h3 id="_1-1-常见的编码表" tabindex="-1">1.1 常见的编码表 <a class="header-anchor" href="#_1-1-常见的编码表" aria-hidden="true">#</a></h3><ul><li><p><strong>ASCII</strong></p><p>​ 用于显示现代英语，主要包括控制字符（回车键、退格、换行键等）和可显示字符（英文大小写字符、阿拉伯数字和西文符号）</p><p>​ 基本的ASCII字符集，使用7位表示一个字符，共128字符。ASCII的扩展字符集使用8位表示一个字符，共256字符，方便支持欧洲常用字符。是一个系统支持的所有字符的集合，包括该各国家文字、标点符号、图形符号、数字等</p></li><li><p><strong>GBK</strong></p><p>​ 最常用的中文码表。是在GB2312标准的基础上的扩展规范，使用了双字节编码方案，共收录了21003个汉字，完全兼容GB2312标准，同时支持繁体汉字以及日韩汉子等</p></li><li><p><strong>Unicode</strong></p><p>​ UTF-8编码：可以用来表示Unicode标准中任意字符，它是电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。它使用一至四个字节为每个字符编码</p><p>​ 编码规则：</p><p>​ 128个US-ASCII字符，只需要一个字节编码</p><p>​ 拉丁文等字符，需要二个字节编码</p><p>​ 大部分常用文字（含中文），使用三个字节编码</p><p>​ 其他极少使用Unicode辅助字符，使用四个字节编码</p></li><li><p><strong>ANSI</strong></p><p>​ 其实不是具体的编码表，它指代系统默认的编码表。例如：简体中文的Windows系统默认编码是GBK。</p></li><li><p>切换编码表只需要在创建对象的构造方法内，**Charset.forName(&quot;gbk&quot;)**写要切换的编码表就可以了</p></li></ul><h2 id="_2-字符流" tabindex="-1">2.字符流 <a class="header-anchor" href="#_2-字符流" aria-hidden="true">#</a></h2><p>​ 当需要读取/写入的数据是纯文本形式时我们可以使用字符流来进行操作会更加方便。</p><h3 id="_2-1-字符输入流" tabindex="-1">2.1 字符输入流 <a class="header-anchor" href="#_2-1-字符输入流" aria-hidden="true">#</a></h3><p>​ 所有字符输入流的父类都是java.io.Reader,它是以字符为单位的输入流。</p><p>​ 我们就以其子类FileReader为例进行学习。</p><h4 id="_2-1-1-filereader概述" tabindex="-1">2.1.1 FileReader概述 <a class="header-anchor" href="#_2-1-1-filereader概述" aria-hidden="true">#</a></h4><p>​ FileReader是用来从文件中读取数据的字符输入流。</p><h4 id="_2-1-2-filereader创建对象" tabindex="-1">2.1.2 FileReader创建对象 <a class="header-anchor" href="#_2-1-2-filereader创建对象" aria-hidden="true">#</a></h4><p>构造方法如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileReader</span><span style="color:#E1E4E8;">(String fileName) throws FileNotFoundException</span><span style="color:#6A737D;">//传入文件路径创建对象</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileReader</span><span style="color:#E1E4E8;">(File file) throws FileNotFoundException</span><span style="color:#6A737D;">//传入文件路径的File对象来创建流对象</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>范例：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) throws FileNotFoundException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//这个路径要对应一个文件，不能是文件夹</span></span>
<span class="line"><span style="color:#E1E4E8;">        FileReader fr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileReader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">sadf.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">//        File f = new File(&quot;C:\\\\Users\\\\DunXi\\\\Desktop\\\\test\\\\sadf.txt&quot;);</span></span>
<span class="line"><span style="color:#E1E4E8;">        FileReader fr2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileReader</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">sadf.txt&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//匿名对象创建</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="_2-1-3-读取数据" tabindex="-1">2.1.3 读取数据 <a class="header-anchor" href="#_2-1-3-读取数据" aria-hidden="true">#</a></h4><h5 id="_2-1-3-1-一次读取一个字符" tabindex="-1">2.1.3.1 一次读取一个字符 <a class="header-anchor" href="#_2-1-3-1-一次读取一个字符" aria-hidden="true">#</a></h5><p>核心方法如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">() throws IOException </span><span style="color:#6A737D;">//一次读取一个字符返回</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>范例：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) throws IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//创建流对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    FileReader fr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileReader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">sadf.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//调用方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> c;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">((c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fr.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span><span style="color:#6A737D;">//如果读到循环末尾，返回值为-1</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">((</span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;">) c);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//释放资源</span></span>
<span class="line"><span style="color:#E1E4E8;">    fr.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h5 id="_2-1-3-2-一次读取一个字符数组" tabindex="-1">2.1.3.2 一次读取一个字符数组 <a class="header-anchor" href="#_2-1-3-2-一次读取一个字符数组" aria-hidden="true">#</a></h5><p>核心方法如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> cbuf[]) throws IOException </span><span style="color:#6A737D;">//一次读取一个字符返回</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>范例：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) throws IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    FileReader fr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileReader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">sadf.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;">[] ch </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">127</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> len;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> ((len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fr.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">(ch)) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(ch);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    fr.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_2-2-字符输出流" tabindex="-1">2.2 字符输出流 <a class="header-anchor" href="#_2-2-字符输出流" aria-hidden="true">#</a></h3><p>​ 所有字符输出流的父类是 java.io.Writer,它是以字符为单位的输出流。</p><p>​ 我们就以FileWriter为例进行学习。</p><h4 id="_2-2-1-filewriter概述" tabindex="-1">2.2.1 FileWriter概述 <a class="header-anchor" href="#_2-2-1-filewriter概述" aria-hidden="true">#</a></h4><p>​ FileWriter是采用来往文件写入数据的字符输出流。</p><h4 id="_2-2-2-filewriter对象创建" tabindex="-1">2.2.2 FileWriter对象创建 <a class="header-anchor" href="#_2-2-2-filewriter对象创建" aria-hidden="true">#</a></h4><p>构造方法如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileWriter</span><span style="color:#E1E4E8;">(String fileName) throws IOException </span><span style="color:#6A737D;">//传入文件路径创建对象</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileWriter</span><span style="color:#E1E4E8;">(File file) throws IOException </span><span style="color:#6A737D;">//传入文件路径的File对象来创建流对象</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>范例：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) throws IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    FileWriter fw </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileWriter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">sadf.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    FileWriter fw2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileWriter</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">sadf.txt&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_2-2-3-写入数据" tabindex="-1">2.2.3 写入数据 <a class="header-anchor" href="#_2-2-3-写入数据" aria-hidden="true">#</a></h4><h5 id="_2-2-3-1-一词写一个字符" tabindex="-1">2.2.3.1 一词写一个字符 <a class="header-anchor" href="#_2-2-3-1-一词写一个字符" aria-hidden="true">#</a></h5><p>核心方法如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> c) throws IOException </span><span style="color:#6A737D;">//把一个字符写入目的地</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">flush</span><span style="color:#E1E4E8;">() throws IOException </span><span style="color:#6A737D;">//把缓存区中的数据写入硬盘</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>范例：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) throws IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//创建流对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    FileWriter fw </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileWriter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">sadf.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//写数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//直接调用write会先把要写的内容放到缓冲区里面，要么等缓冲区满了，要么自己调用flush刷新一下</span></span>
<span class="line"><span style="color:#E1E4E8;">    fw.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;敦&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    fw.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;禧&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    fw.</span><span style="color:#B392F0;">flush</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    fw.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;科&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    fw.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;技&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//释放资源</span></span>
<span class="line"><span style="color:#E1E4E8;">    fw.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span><span style="color:#6A737D;">//释放资源之后系统也会自动把数据存盘</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h5 id="_2-2-3-2-一次写入一个子字符数组" tabindex="-1">2.2.3.2 一次写入一个子字符数组 <a class="header-anchor" href="#_2-2-3-2-一次写入一个子字符数组" aria-hidden="true">#</a></h5><p>核心方法如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> cbuf[]) throws IOException </span><span style="color:#6A737D;">//把一个字符数组写入目的地</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>范例：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) throws IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//创建流对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    FileWriter fw </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileWriter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">sadf.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//写数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;">[] chars </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;敦禧科技&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toCharArray</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    fw.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(chars);</span></span>
<span class="line"><span style="color:#E1E4E8;">    fw.</span><span style="color:#B392F0;">flush</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    chars </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;666&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toCharArray</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    fw.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(chars);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//释放资源</span></span>
<span class="line"><span style="color:#E1E4E8;">    fw.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span><span style="color:#6A737D;">//释放资源之后系统也会自动把数据存盘</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h5 id="_2-2-3-3-一次写入一个字符串" tabindex="-1">2.2.3.3 一次写入一个字符串 <a class="header-anchor" href="#_2-2-3-3-一次写入一个字符串" aria-hidden="true">#</a></h5><p>核心方法如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(String str) throws IOException </span><span style="color:#6A737D;">//把一个字符串写入目的地</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>范例：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) throws IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//创建流对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    FileWriter fw </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileWriter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">sadf.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//写数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    fw.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;敦禧科技&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    fw.</span><span style="color:#B392F0;">flush</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//释放资源</span></span>
<span class="line"><span style="color:#E1E4E8;">    fw.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span><span style="color:#6A737D;">//释放资源之后系统也会自动把数据存盘</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h5 id="_2-2-3-4-如何抉择" tabindex="-1">2.2.3.4 如何抉择？ <a class="header-anchor" href="#_2-2-3-4-如何抉择" aria-hidden="true">#</a></h5><p>​ 随机应变，根据情况选择合适的重载类型，有什么类型的数据就使用对应的重载形式。</p><h2 id="练习" tabindex="-1">练习 <a class="header-anchor" href="#练习" aria-hidden="true">#</a></h2><p>1.使用字符流实现纯文本文件的复制。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) throws IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//创建流对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        File file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">sadf.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        FileReader fr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileReader</span><span style="color:#E1E4E8;">(file);</span></span>
<span class="line"><span style="color:#E1E4E8;">        FileWriter fw </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileWriter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">22.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//循环读写</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;">[] chars </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> len;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">((len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fr.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">(chars)) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//把读到的内容写入新文件中</span></span>
<span class="line"><span style="color:#E1E4E8;">            fw.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(chars,</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,len);</span></span>
<span class="line"><span style="color:#6A737D;">//            fw.flush();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#6A737D;">//        释放资源</span></span>
<span class="line"><span style="color:#E1E4E8;">        fw.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        fr.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h1 id="io流-4" tabindex="-1">IO流-4 <a class="header-anchor" href="#io流-4" aria-hidden="true">#</a></h1><h2 id="_1-高效缓冲流" tabindex="-1">1.高效缓冲流 <a class="header-anchor" href="#_1-高效缓冲流" aria-hidden="true">#</a></h2><h3 id="_1-1概述-1" tabindex="-1">1.1概述 <a class="header-anchor" href="#_1-1概述-1" aria-hidden="true">#</a></h3><p>​ 对硬盘进行数据的读取相比于从内存中存取数据要慢得多。所以JDK为我们提供了高效缓冲流来提高我们IO流的效率。内部原理就是借助内存的缓冲区来减少磁盘IO的次数，提高性能。</p><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/image-20221121160130585.png" alt="image-20221121160130585"></p><h3 id="_1-2-分类" tabindex="-1">1.2 分类 <a class="header-anchor" href="#_1-2-分类" aria-hidden="true">#</a></h3><ul><li><p>字节流</p><p>输入流</p><p>​ BufferedInputStream</p><p>输出流</p><p>​ BufferedOutputStream</p></li><li><p>字符流</p><p>输入流</p><p>​ BufferedReader</p><p>输出流</p><p>BufferedWriter</p></li></ul><h3 id="_1-2-对象的创建" tabindex="-1">1.2 对象的创建 <a class="header-anchor" href="#_1-2-对象的创建" aria-hidden="true">#</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BufferedInputStream</span><span style="color:#E1E4E8;">(InputStream in)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BufferedOutputStream</span><span style="color:#E1E4E8;">(OutputStream out)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BufferedReader</span><span style="color:#E1E4E8;">(Reader in)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BufferedWriter</span><span style="color:#E1E4E8;">(Writer out)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>范例：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) throws FileNotFoundException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        BufferedInputStream bis </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BufferedInputStream</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileInputStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">sadf.txt&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        BufferedOutputStream bos </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BufferedOutputStream</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileOutputStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">sadf.txt&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        BufferedReader br </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BufferedReader</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileReader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">sadf.txt&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        BufferedWriter bw </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BufferedWriter</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">sadf.txt&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_1-3-特有的方法" tabindex="-1">1.3 特有的方法 <a class="header-anchor" href="#_1-3-特有的方法" aria-hidden="true">#</a></h3><table><thead><tr><th>类</th><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>BufferedReader</td><td>public String readLine() throws IOException</td><td>一次读取一行数据，读到了文件末尾返回null</td></tr><tr><td>BufferedWriter</td><td>public void newLine() throws IOException</td><td>写入一个换行符，会根据系统变化</td></tr></tbody></table><p>范例：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) throws IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//readLine</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//创建对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    BufferedReader br </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BufferedReader</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileReader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">333.txt&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//读取数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    String line;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> ((line </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> br.</span><span style="color:#B392F0;">readLine</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//把读到的内容输出</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(line);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//释放资源</span></span>
<span class="line"><span style="color:#E1E4E8;">    br.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) throws IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//newLine</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//创建对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    BufferedWriter bw </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BufferedWriter</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileWriter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">444.txt&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//写入数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    bw.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;你好 啊&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//写入换行符</span></span>
<span class="line"><span style="color:#E1E4E8;">    bw.</span><span style="color:#B392F0;">newLine</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    bw.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;我很好&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//释放资源</span></span>
<span class="line"><span style="color:#E1E4E8;">    bw.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>练习：</p><p>用高效缓冲流实现文件的复制操作</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) throws IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//newLine</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//创建对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    BufferedReader br </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BufferedReader</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileReader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">333.txt&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    BufferedWriter bw </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BufferedWriter</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileWriter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">DunXi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Desktop</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">444.txt&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//循环读写数据，把读到的数据写入目标文件中</span></span>
<span class="line"><span style="color:#E1E4E8;">    String line;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">((line </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> br.</span><span style="color:#B392F0;">readLine</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//把读到的数据写入文件</span></span>
<span class="line"><span style="color:#E1E4E8;">        bw.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(line);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//写入换行符</span></span>
<span class="line"><span style="color:#E1E4E8;">        bw.</span><span style="color:#B392F0;">newLine</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//释放资源</span></span>
<span class="line"><span style="color:#E1E4E8;">    bw.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    br.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div>`,579);function x(k,w,A,S,j,D){const a=t("font");return c(),r("div",null,[i,s("p",null,[n("类：对一类事物共同点的"),l(a,{color:"red"},{default:p(()=>[n("描述")]),_:1})]),s("p",null,[n("对象：对象是某类事物的一个"),l(a,{color:"red"},{default:p(()=>[n("个体")]),_:1})]),y,s("p",null,[n("​ "),l(a,{color:"red"},{default:p(()=>[d]),_:1})]),b,s("p",null,[n("​ "),l(a,{color:"red"},{default:p(()=>[u,n(" ")]),_:1})]),F,s("p",null,[n("​ "),l(a,{color:"red"},{default:p(()=>[h]),_:1})]),m,s("p",null,[n("​ "),l(a,{color:"red"},{default:p(()=>[g]),_:1})]),v,s("ul",null,[B,_,s("li",null,[l(a,{color:"red"},{default:p(()=>[n("对类中的成员变量进行**默认初始化** ")]),_:1})])]),C,s("p",null,[n("​ 在要实现接口的类名后面加上"),l(a,{color:"red"},{default:p(()=>[n("implements 接口名")]),_:1}),n("。**如果要实现多个接口，多个接口名用逗号分开。**我们在理解的时候可以把接口理解成一个特殊的父类。")]),f])}const O=o(E,[["render",x]]);export{I as __pageData,O as default};
